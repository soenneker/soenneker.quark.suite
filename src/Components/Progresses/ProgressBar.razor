@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IProgressBar

<Div Class="progress-bar" @attributes="BuildAttributes()" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="100" >
    @if (ShowLabel)
    {
        @($"{Value}%")
    }
    @ChildContent
</Div>

@code {
	public override string? ThemeKey { get; set; } = "ProgressBar";

    [Parameter]
    public int Value { get; set; }


    [Parameter]
    public bool Striped { get; set; }

    [Parameter]
    public bool Animated { get; set; }

    [Parameter]
    public bool ShowLabel { get; set; } = true;

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        AppendToClassAttr(attributes, "progress-bar");

        if (Striped)
            AppendToClassAttr(attributes, "progress-bar-striped");

        if (Animated)
            AppendToClassAttr(attributes, "progress-bar-animated");

        // Handle color styling using BackgroundColor
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("bg-", StringComparison.Ordinal))
                    AppendToClassAttr(attributes, v);
                else
                    AppendToClassAttr(attributes, $"bg-{v}");
            }
            else
            {
                // Build style efficiently - BackgroundColor already handles background-color
                var styleParts = new List<string> { $"width: {Value}%" };
                
                if (attributes.TryGetValue("style", out var existing) && existing?.ToString().HasContent() == true)
                    styleParts.Insert(0, existing.ToString()!);
                    
                attributes["style"] = string.Join(";", styleParts) + ";";
            }
        }
        else
        {
            AppendStyleDeclAttr(attributes, $"width: {Value}%");
        }

        return attributes;
    }


}
