@using Soenneker.Quark.Components.Progresses.Abstract

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IProgressBar

<Div @attributes="BuildAttributes()" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="100" >
    @if (ShowLabel)
    {
        @($"{Value}%")
    }
    @ChildContent
</Div>

@code {
	public override string? ThemeKey { get; set; } = "ProgressBar";

    [Parameter]
    public new RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int Value { get; set; }


    [Parameter]
    public bool Striped { get; set; }

    [Parameter]
    public bool Animated { get; set; }

    [Parameter]
    public bool ShowLabel { get; set; } = true;

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        string? bgClass = null;
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            var v = BackgroundColor.Value.ToString().Trim();
            if (BackgroundColor.Value.IsCssClass)
            {
                bgClass = v.StartsWith("bg-", StringComparison.Ordinal) ? v : $"bg-{v}";
            }
        }

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "progress-bar");
            
            if (Striped)
                AppendClass(ref cls, "progress-bar-striped");
            if (Animated)
                AppendClass(ref cls, "progress-bar-animated");
            if (bgClass != null)
                AppendClass(ref cls, bgClass);
        });

        BuildStyleAttribute(attributes, (ref PooledStringBuilder sty) => AppendStyleDecl(ref sty, $"width: {Value}%"));

        return attributes;
    }


}
