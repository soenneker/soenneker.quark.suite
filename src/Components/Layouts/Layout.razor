@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements ILayout

<CascadingValue Value="@this" IsFixed="true" >
    <CascadingValue Value="@_sidebarVisible" IsFixed="true">
        <CascadingValue Value="@OnSidebarVisibleChanged" IsFixed="true">
            <CascadingValue Value="@TextStyle" IsFixed="true">
                <Section @attributes="BuildAttributes()" >
                @if (Loading)
                {
                    @if (LoadingTemplate is not null)
                    {
                        @LoadingTemplate
                    }
                    else
                    {
                        <Div @attributes="BuildLoadingAttributes()" ></Div>
                    }
                }
                @ChildContent
                </Section>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    public override string? ThemeKey { get; set; } = "Layout";

    [Parameter]
    public bool Sider { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public string? LoadingClass { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }


    private bool _sidebarVisible = true;

    private bool _initialized;

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "d-flex");
            if (!Sider)
                AppendClass(ref cls, "flex-column");
            AppendClass(ref cls, "min-vh-100");
            AppendClass(ref cls, "w-100");
        });

        // a11y: reflect busy state when loading overlay shown
        SetOrRemove(attributes, "aria-busy", Loading, "true");

        return attributes;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Dictionary<string, object> BuildLoadingAttributes()
    {
        var attributes = new Dictionary<string, object>();
        
        if (LoadingClass.IsNullOrWhiteSpace())
        {
            BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
            {
                AppendClass(ref cls, "position-fixed");
                AppendClass(ref cls, "top-0");
                AppendClass(ref cls, "start-0");
                AppendClass(ref cls, "w-100");
                AppendClass(ref cls, "h-100");
                AppendClass(ref cls, "bg-body");
                AppendClass(ref cls, "bg-opacity-75");
            });
        }
        else
        {
            BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => AppendClass(ref cls, LoadingClass!));
        }
        
        return attributes;
    }

    private void OnSidebarVisibleChanged(bool visible)
    {
        _sidebarVisible = visible;
        StateHasChanged();
    }

}
