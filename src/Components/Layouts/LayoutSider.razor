
@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements ILayoutSider

<aside @attributes="BuildAttributes()">
    <CascadingValue Value="@_sidebarVisible" IsFixed="true">
        <CascadingValue Value="@OnSidebarVisibleChanged" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</aside>

@code {
    public override string? ThemeKey { get; set; } = "LayoutSider";

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    private bool _sidebarVisible = true;

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();
        
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "d-flex");
            AppendClass(ref cls, "flex-column");
            
            if (!_sidebarVisible)
                AppendClass(ref cls, "sidebar-hidden");
        });

        // Prevent aside from shrinking so content area can expand naturally
        // Use flex: 0 0 auto to maintain natural width without growing or shrinking
        BuildStyleAttribute(attributes, (ref PooledStringBuilder sty) => AppendStyleDecl(ref sty, "flex: 0 0 auto"));

        return attributes;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _sidebarVisible = Visible;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (_sidebarVisible != Visible)
        {
            _sidebarVisible = Visible;
            StateHasChanged();
        }
    }

    private async Task OnSidebarVisibleChanged(bool visible)
    {
        _sidebarVisible = visible;
        await VisibleChanged.InvokeAsync(visible);
        StateHasChanged();
    }
}
