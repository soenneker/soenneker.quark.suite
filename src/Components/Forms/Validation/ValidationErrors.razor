@namespace Soenneker.Quark
@inherits Element

@if (_visible && _status == ValidationStatus.Error && (_messages?.Any() ?? false))
{
    <Div @attributes="BuildAttributes()" >
        @foreach (var message in _messages!)
        {
            <Div>@message</Div>
        }
    </Div>
}

@code {
    public override string? ThemeKey { get; set; } = "ValidationErrors";

    [CascadingParameter]
    public Validations? ParentValidations { get; set; }

    private bool _visible;
    private ValidationStatus _status = ValidationStatus.None;
    private IReadOnlyCollection<string>? _messages;

    protected override void OnInitialized()
    {
        if (ParentValidations is not null)
        {
            ParentValidations._statusChanged += OnStatusChanged;
            ParentValidations.ClearingAll += OnClearingAll;
        }
    }

    private void OnStatusChanged(ValidationsStatusChangedEventArgs args)
    {
        _status = args.Status;
        _messages = args.Messages;
        _visible = args.Status != ValidationStatus.None;
        InvokeAsync(StateHasChanged);
    }

    private void OnClearingAll()
    {
        _visible = false;
        _status = ValidationStatus.None;
        _messages = null;
        InvokeAsync(StateHasChanged);
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "alert");
            AppendClass(ref cls, "alert-danger");
        });
        return attributes;
    }

    public override void Dispose()
    {
        base.Dispose();

        if (ParentValidations is not null)
        {
            ParentValidations._statusChanged -= OnStatusChanged;
            ParentValidations.ClearingAll -= OnClearingAll;
        }
    }

}
