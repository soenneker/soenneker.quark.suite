@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IFieldLabel

<label @attributes="BuildAttributes()">
    @ChildContent
    @if (RequiredIndicator)
    {
        <span class="field-required">*</span>
    }
</label>

@code {
    public override string? ThemeKey { get; set; } = "FieldLabel";

    private bool _requiredIndicator;

    [Parameter]
    public string? For { get; set; }

    [Parameter]
    public bool RequiredIndicator
    {
        get => _requiredIndicator;
        set
        {
            _requiredIndicator = value;
            StateHasChanged();
        }
    }

    protected virtual bool IsHorizontal => ParentField?.Horizontal == true;

    [CascadingParameter]
    protected Field? ParentField { get; set; }

    protected override void OnInitialized()
    {
        ParentField?.RegisterChild(this);
        base.OnInitialized();
    }

    protected override void OnDispose()
    {
        ParentField?.UnregisterChild(this);
        base.OnDispose();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => 
            AppendClass(ref cls, IsHorizontal ? "col-form-label" : "form-label")
        );

        if (For.HasContent())
            attributes["for"] = For;

        return attributes;
    }

}