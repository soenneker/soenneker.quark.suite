@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IModal

@if (Visible)
{
    <CascadingValue Value="@this">
		<Div TabIndex="-1" OnKeyDown="HandleKeyDown" OnClick="HandleBackdropClick" @attributes="BuildAttributes()">
			<Div @attributes="BuildDialogAttributes()" @onclick:stopPropagation="true">
                <Div Class="modal-content">
                    @ChildContent
                </Div>
            </Div>
        </Div>
        @if (ShowBackdrop)
        {
            <Div Class="modal-backdrop fade show"></Div>
        }
    </CascadingValue>
}

@code {
	public override string? ThemeKey { get; set; } = "Modal";

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public bool ShowBackdrop { get; set; } = true;

    [Parameter]
    public bool Centered { get; set; }

    [Parameter]
    public bool Scrollable { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public bool Static { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnBackdropClick { get; set; }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();
        
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "modal");
            AppendClass(ref cls, "fade");
            
            if (Visible)
                AppendClass(ref cls, "show");
        });
        
        if (Visible)
            BuildStyleAttribute(attributes, (ref PooledStringBuilder sty) => AppendStyleDecl(ref sty, "display: block"));
        
        attributes["role"] = "dialog";
        attributes["aria-modal"] = "true";
        
        if (Static)
            attributes["data-bs-backdrop"] = "static";
            
        return attributes;
    }

    private Dictionary<string, object> BuildDialogAttributes()
    {
        var attributes = new Dictionary<string, object>();
        
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "modal-dialog");
            
            if (Centered)
                AppendClass(ref cls, "modal-dialog-centered");
            if (Scrollable)
                AppendClass(ref cls, "modal-dialog-scrollable");
            if (Size != null && !Size.Value.IsEmpty)
                AppendClass(ref cls, $"modal-{Size.Value}");
        });
            
        return attributes;
    }

    protected override async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!Static && e.Key == "Escape")
        {
            await Hide();
        }

        await base.HandleKeyDown(e);
    }

    private async Task HandleBackdropClick(MouseEventArgs args)
    {
        if (!Static)
        {
            await OnBackdropClick.InvokeIfHasDelegate();
            await Hide();
        }
    }

    public async Task Show()
    {
        if (!Visible)
        {
            Visible = true;

            await VisibleChanged.InvokeIfHasDelegate(Visible);
            await OnShow.InvokeIfHasDelegate();
        }
    }

    public async Task Hide()
    {
        if (Visible)
        {
            Visible = false;

            await VisibleChanged.InvokeIfHasDelegate(Visible);
            await OnHide.InvokeIfHasDelegate();
        }
    }
}
