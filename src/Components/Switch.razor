@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements ISwitch

<Div Class="form-check form-switch" @attributes="BuildWrapperAttributes()" >
    <input type="checkbox" @attributes="BuildInputAttributes()" />
    @if (Label.HasContent())
    {
        <Label Class="form-check-label" >@Label</Label>
    }
</Div>

@code {
	public override string? ThemeKey { get; set; } = "Switch";

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Label { get; set; }


    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    public object? ValidationValue => Checked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null)
        {
            if (CheckedExpression is not null)
                await ParentValidation.InitializeInputExpression(CheckedExpression);

            await ParentValidation.InitializeInput(this);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string? GetColorClass()
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            string? token = null;
            var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

            if (isTheme && token is not null)
            {
                // Bootstrap theme token (e.g., "primary", "secondary")
                return $"form-check-input-{token}";
            }

            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("form-check-input-", StringComparison.Ordinal))
                    return v;
                return $"form-check-input-{v}";
            }
        }

        return null;
    }

    private string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"form-check-input-{token}";

        return Size?.ToString() != null ? $"form-check-input-{Size}" : null;
    }

    protected Dictionary<string, object> BuildWrapperAttributes()
    {
        var attributes = base.BuildAttributes();
        return attributes;
    }

    private Dictionary<string, object> BuildInputAttributes()
    {
        var attributes = new Dictionary<string, object>();

        AppendToClassAttr(attributes, "form-check-input");
        
        var colorClass = GetColorClass();
        if (colorClass != null)
            AppendToClassAttr(attributes, colorClass);
            
        var sizeClass = GetSizeClass();
        if (sizeClass != null)
            AppendToClassAttr(attributes, sizeClass);
            
        var validationClass = GetValidationClass();
        if (validationClass != null)
            AppendToClassAttr(attributes, validationClass);

        // Handle custom CSS colors using BackgroundColor
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty && !BackgroundColor.Value.IsCssClass)
        {
            var v = BackgroundColor.Value.ToString().Trim();
            // BackgroundColor already handles background-color, just add border-color
            AppendStyleDeclAttr(attributes, $"border-color:{v}");
        }

        if (Checked)
            attributes["checked"] = true;

        if (Disabled)
            attributes["disabled"] = true;

        attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

        return attributes;
    }

    private string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";
        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";

        return null;
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeIfHasDelegate(Checked);
        }

        await OnChange.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
            await ParentValidation.NotifyInputChanged(Checked);
    }


}
