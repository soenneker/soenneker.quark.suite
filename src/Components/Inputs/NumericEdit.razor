@using System.Globalization
@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements INumericEdit

<Input @ref="inputComponent" 
       Type="number"
       @attributes="BuildInputAttributes()" 
       @bind-Value="Value"
       OnInput="HandleInput"
       OnChange="HandleChange"
       ValidationValueSelector="@(() => (object?)Value)" />

@code {
    public override string? ThemeKey { get; set; } = "NumericEdit";

    [Parameter]
    public decimal? Value { get; set; }

    [Parameter]
    public decimal? Min { get; set; }

    [Parameter]
    public decimal? Max { get; set; }

    [Parameter]
    public decimal? Step { get; set; }

    [Parameter]
    public EventCallback<decimal?> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<decimal?>>? ValueExpression { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public bool PlainText { get; set; }

    [Parameter]
    public bool FloatingLabel { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    private Input? inputComponent;

    public object? ValidationValue => Value;

    public string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";

        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";

        return null;
    }

    public string? GetColorClass()
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            string? token = null;
            var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

            if (isTheme && token is not null)
            {
                // Bootstrap theme token (e.g., "primary", "secondary")
                return $"form-control-{token}";
            }

            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("form-control-", StringComparison.Ordinal))
                    return v;
                return $"form-control-{v}";
            }
        }

        return null;
    }

    public string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"form-control-{token}";

        return Size?.ToString() != null ? $"form-control-{Size}" : null;
    }

    private static decimal? ParseDecimal(ChangeEventArgs e)
    {
        if (e?.Value == null)
            return null;

        var text = e.Value.ToString();

        if (decimal.TryParse(text, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
            return result;

        return null;
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        Value = ParseDecimal(e);
        await ValueChanged.InvokeIfHasDelegate(Value);
        await OnInput.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            ParentValidation.MarkTouched();
            await ParentValidation.NotifyInputChanged(Value);
        }
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        Value = ParseDecimal(e);
        await ValueChanged.InvokeIfHasDelegate(Value);
        await OnChange.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            ParentValidation.MarkTouched();
            await ParentValidation.NotifyInputChanged(Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null && ValueExpression is not null)
        {
            await ParentValidation.InitializeInputExpression(ValueExpression);
            ParentValidation.ValidationStatusChanged += OnParentValidationStatusChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnParentValidationStatusChanged(object? sender, ValidationStatusChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, object> BuildInputAttributes()
    {
        var attributes = new Dictionary<string, object>();

        // Add NumericEdit-specific attributes
        if (Value.HasValue)
            attributes["value"] = Value.Value.ToString(CultureInfo.InvariantCulture);

        if (Min.HasValue)
            attributes["min"] = Min.Value.ToString(CultureInfo.InvariantCulture);

        if (Max.HasValue)
            attributes["max"] = Max.Value.ToString(CultureInfo.InvariantCulture);

        if (Step.HasValue)
            attributes["step"] = Step.Value.ToString(CultureInfo.InvariantCulture);

        // Pass through Input component properties
        if (Placeholder.HasContent())
            attributes["placeholder"] = Placeholder;

        if (Disabled)
            attributes["disabled"] = true;

        if (ReadOnly)
            attributes["readonly"] = true;

        if (Required)
            attributes["required"] = true;

        if (Size != Quark.Size.Default)
            attributes["size"] = Size;

        if (PlainText)
            attributes["plaintext"] = true;

        if (FloatingLabel)
            attributes["floatinglabel"] = true;

        if (Label.HasContent())
            attributes["label"] = Label;

        return attributes;
    }

    public override void Dispose()
    {
        base.Dispose();

        if (ParentValidation is not null)
            ParentValidation.ValidationStatusChanged -= OnParentValidationStatusChanged;
    }
}