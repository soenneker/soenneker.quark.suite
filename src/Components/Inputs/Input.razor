@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements IInput

<input @attributes="BuildAttributes()" />

@code {
    public override string? ThemeKey { get; set; } = "Input";

    [Parameter]
    public virtual string? Type { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public bool PlainText { get; set; }

    [Parameter]
    public bool FloatingLabel { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    [Parameter]
    public Func<object?>? ValidationValueSelector { get; set; }

    public virtual object? ValidationValue => ValidationValueSelector?.Invoke();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null)
        {
            await ParentValidation.InitializeInput(this);
            ParentValidation.ValidationStatusChanged += OnParentValidationStatusChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnParentValidationStatusChanged(object? sender, ValidationStatusChangedEventArgs e)
    {
        // re-render so GetValidationClass() applies immediately for both Validate All and per-field
        InvokeAsync(StateHasChanged);
    }

    protected virtual async Task HandleInput(ChangeEventArgs e)
    {
        if (OnInput.HasDelegate)
            await OnInput.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            var valueObj = ValidationValue;
            await ParentValidation.NotifyInputChanged(valueObj);
        }
    }

    protected virtual async Task HandleChange(ChangeEventArgs e)
    {
        await OnChange.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            var valueObj = ValidationValue;
            await ParentValidation.NotifyInputChanged(valueObj);
        }
    }

    private bool ShouldShowInvalid()
    {
        if (ParentValidation is null || ParentValidation.Status != ValidationStatus.Error)
            return false;

        var showInvalidProp = ParentValidation.GetType().GetProperty("ShouldShowInvalid");
        var showInvalid = showInvalidProp?.GetValue(ParentValidation) as bool? ?? true;
        return showInvalid;
    }

    private bool ShouldShowValid()
    {
        return ParentValidation?.Status == ValidationStatus.Success;
    }

    public virtual string? GetValidationClass()
    {
        if (ShouldShowInvalid())
            return "is-invalid";

        if (ShouldShowValid())
            return "is-valid";

        return null;
    }

    public virtual string? GetColorClass()
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            string? token = null;
            var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

            if (isTheme && token is not null)
            {
                // Bootstrap theme token (e.g., "primary", "secondary")
                return $"form-control-{token}";
            }

            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("form-control-", StringComparison.Ordinal))
                    return v;
                return $"form-control-{v}";
            }
        }

        return null;
    }

    public virtual string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"form-control-{token}";

        return Size?.ToString() != null ? $"form-control-{Size}" : null;
    }

    protected virtual string GetInputType()
    {
        return Type ?? "text";
    }


    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        // Add Input-specific attributes
        var baseClasses = PlainText ? "form-control-plaintext" : "form-control";
        var colorClass = GetColorClass();
        var sizeClass = GetSizeClass();
        var validationClass = GetValidationClass();

        if (colorClass != null)
            baseClasses = $"{baseClasses} {colorClass}";

        if (sizeClass != null)
            baseClasses = $"{baseClasses} {sizeClass}";

        if (validationClass != null)
            baseClasses = $"{baseClasses} {validationClass}";

        AppendToClassAttr(attributes, baseClasses);

        // Add type attribute
        attributes["type"] = GetInputType();

        // Handle custom CSS colors using BackgroundColor
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty && !BackgroundColor.Value.IsCssClass)
        {
            var v = BackgroundColor.Value.ToString().Trim();
            // BackgroundColor already handles background-color, just add border-color
            attributes["style"] = $"border-color:{v};";
        }

        if (Placeholder.HasContent())
            attributes["placeholder"] = Placeholder;

        if (Disabled)
            attributes["disabled"] = true;

        if (ReadOnly)
            attributes["readonly"] = true;

        if (Required)
            attributes["required"] = true;

        // Wire input/change events
        attributes["oninput"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleInput);
        attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

        return attributes;
    }

    public override void Dispose()
    {
        base.Dispose();

        if (ParentValidation is not null)
            ParentValidation.ValidationStatusChanged -= OnParentValidationStatusChanged;
    }
}
