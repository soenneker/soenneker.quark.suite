@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements IInput

<input value="@Value"
       @oninput="HandleInput"
       @onchange="HandleChange"
       @attributes="BuildAttributes()" />

@code {
    public override string? ThemeKey { get; set; } = "Input";

    // ===== 2-way binding triplet =====
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<string?>>? ValueExpression { get; set; } // NEW: enables EditForm/validation

    // ===== Common input props =====
    [Parameter] public virtual string? Type { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;
    [Parameter] public bool PlainText { get; set; }
    [Parameter] public bool FloatingLabel { get; set; }
    [Parameter] public string? Label { get; set; }

    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInput { get; set; }

    // ===== Validation plumbing =====
    [CascadingParameter] public Validation? ParentValidation { get; set; }
    [Parameter] public Func<object?>? ValidationValueSelector { get; set; }
    public virtual object? ValidationValue => ValidationValueSelector?.Invoke();

    private string? _lastValue;
    private bool _valueChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null)
        {
            await ParentValidation.InitializeInput(this);
            ParentValidation.ValidationStatusChanged += OnParentValidationStatusChanged;
        }
        _valueChanged = false;
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        if (!string.Equals(Value, _lastValue, StringComparison.Ordinal))
        {
            _valueChanged = true;
            _lastValue = Value;
        }

        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        return _valueChanged || base.ShouldRender();
    }

    private void OnParentValidationStatusChanged(object? sender, ValidationStatusChangedEventArgs e)
        => InvokeAsync(StateHasChanged);

    protected virtual async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        if (!string.Equals(Value, newValue, StringComparison.Ordinal))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(Value);
            _valueChanged = true;
        }

        if (OnInput.HasDelegate)
            await OnInput.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            var valueObj = ValidationValue;
            await ParentValidation.NotifyInputChanged(valueObj);
        }
    }

    protected virtual async Task HandleChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        if (!string.Equals(Value, newValue, StringComparison.Ordinal))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(Value);
            _valueChanged = true;
        }

        await OnChange.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
        {
            var valueObj = ValidationValue;
            await ParentValidation.NotifyInputChanged(valueObj);
        }
    }

    private bool ShouldShowInvalid()
    {
        if (ParentValidation is null || ParentValidation.Status != ValidationStatus.Error)
            return false;

        var showInvalidProp = ParentValidation.GetType().GetProperty("ShouldShowInvalid");
        var showInvalid = showInvalidProp?.GetValue(ParentValidation) as bool? ?? true;
        return showInvalid;
    }

    private bool ShouldShowValid() => ParentValidation?.Status == ValidationStatus.Success;

    public virtual string? GetValidationClass()
    {
        if (ShouldShowInvalid()) return "is-invalid";
        if (ShouldShowValid()) return "is-valid";
        return null;
    }

    public virtual string? GetColorClass()
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            string? token = null;
            var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

            if (isTheme && token is not null)
                return $"form-control-{token}";

            var v = BackgroundColor.Value.ToString().Trim();
            if (BackgroundColor.Value.IsCssClass)
                return v.StartsWith("form-control-", StringComparison.Ordinal) ? v : $"form-control-{v}";
        }
        return null;
    }

    public virtual string? GetSizeClass()
    {
        if (Size == Quark.Size.Default) return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null) return $"form-control-{token}";

        return Size?.ToString() != null ? $"form-control-{Size}" : null;
    }

    protected virtual string GetInputType() => Type ?? "text";

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, PlainText ? "form-control-plaintext" : "form-control");

            var colorClass = GetColorClass();
            if (colorClass is not null) AppendClass(ref cls, colorClass);

            var sizeClass = GetSizeClass();
            if (sizeClass is not null) AppendClass(ref cls, sizeClass);

            var validationClass = GetValidationClass();
            if (validationClass is not null) AppendClass(ref cls, validationClass);
        });

        attributes["type"] = GetInputType();

        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty && !BackgroundColor.Value.IsCssClass)
        {
            var v = BackgroundColor.Value.ToString().Trim();
            attributes["style"] = $"border-color:{v};";
        }

        if (Placeholder.HasContent()) attributes["placeholder"] = Placeholder;
        if (Disabled) attributes["disabled"] = true;
        if (ReadOnly) attributes["readonly"] = true;
        if (Required) attributes["required"] = true;

        return attributes;
    }

    public override void Dispose()
    {
        base.Dispose();
        if (ParentValidation is not null)
            ParentValidation.ValidationStatusChanged -= OnParentValidationStatusChanged;
    }
}
