@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements ICheck
@inject ICheckInterop CheckInterop

@if (ChildContent != null)
{
    <div class="@GetWrapperClass()">
        <input id="@Id" type="checkbox" @attributes="BuildAttributes()" @onchange="HandleChange" />
        <label class="form-check-label" for="@Id">
            @ChildContent
        </label>
    </div>
}
else
{
    <input type="checkbox" @attributes="BuildAttributes()" @onchange="HandleChange" />
}

@code {

    public override string? ThemeKey { get; set; } = "Check";

    public override string? Id { get; set; } = $"check-{Guid.NewGuid():N}";

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Indeterminate { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public bool Switch { get; set; }

    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public bool Reverse { get; set; }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    public object? ValidationValue => Checked;

    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await CheckInterop.Initialize();
            _initialized = true;
        }

        if (firstRender && ParentValidation is not null)
        {
            if (CheckedExpression is not null)
                await ParentValidation.InitializeInputExpression(CheckedExpression);

            await ParentValidation.InitializeInput(this);
            ParentValidation.ValidationStatusChanged += OnParentValidationStatusChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnParentValidationStatusChanged(object? sender, ValidationStatusChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetWrapperClass()
    {
        var classes = new List<string>();
        
        if (Switch)
            classes.Add("form-switch");
        else
            classes.Add("form-check");

        if (Inline)
            classes.Add("form-check-inline");

        if (Reverse)
            classes.Add("form-check-reverse");

        return string.Join(" ", classes);
    }

    private string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"quark-check-{token}";

        // SizeBuilder now generates clean tokens like "lg", "sm" without prefix
        var sizeValue = Size?.ToString();
        return sizeValue.HasContent() ? $"quark-check-{sizeValue}" : null;
    }

    public override void Dispose()
    {
        base.Dispose();

        if (ParentValidation is not null)
            ParentValidation.ValidationStatusChanged -= OnParentValidationStatusChanged;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        var baseClass = Switch ? "form-switch-input" : "form-check-input";
        AppendToClassAttr(attributes, baseClass);
            
        var sizeClass = GetSizeClass();
        if (sizeClass != null)
            AppendToClassAttr(attributes, sizeClass);
            
        var validationClass = GetValidationClass();
        if (validationClass != null)
            AppendToClassAttr(attributes, validationClass);

        if (Checked)
            attributes["checked"] = true;

        if (Indeterminate)
            attributes["indeterminate"] = true;

        if (Disabled)
            attributes["disabled"] = true;

        return attributes;
    }

    private string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";

        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";

        return null;
    }

    private async Task HandleChange(ChangeEventArgs args)
    {
        if (args.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeIfHasDelegate(Checked);
        }

        await OnChange.InvokeIfHasDelegate(args);

        if (ParentValidation is not null)
            await ParentValidation.NotifyInputChanged(Checked);
    }

}
