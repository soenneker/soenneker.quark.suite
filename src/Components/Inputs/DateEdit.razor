@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IDateEdit

<Input Type="@GetInputModeString()"
       @attributes="BuildInputAttributes()" 
       OnInput="HandleInput"
       OnChange="HandleChange" />

@code {
	public override string? ThemeKey { get; set; } = "DateEdit";

	[Parameter]
	public DateTime? Date { get; set; }

	[Parameter]
	public Expression<Func<DateTime>>? DateExpression { get; set; }

	[Parameter]
	public DateOnly? DateOnly { get; set; }

	[Parameter]
	public Expression<Func<DateOnly>>? DateOnlyExpression { get; set; }

	[Parameter]
	public DateTime Min { get; set; }

	[Parameter]
	public DateTime Max { get; set; }

	[Parameter]
	public DateOnly MinDateOnly { get; set; }

	[Parameter]
	public DateOnly MaxDateOnly { get; set; }

	[Parameter]
	public int Step { get; set; } = 1;

	[Parameter]
	public DateInputMode InputMode { get; set; } = DateInputMode.Date;

	[Parameter]
	public EventCallback<DateTime?> DateChanged { get; set; }

	[Parameter]
	public EventCallback<DateOnly?> DateOnlyChanged { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool ReadOnly { get; set; }

	[Parameter]
	public bool Required { get; set; }

	[Parameter]
	public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

	[Parameter]
	public bool PlainText { get; set; }

	[Parameter]
	public bool FloatingLabel { get; set; }

	[Parameter]
	public string? Label { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChange { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnInput { get; set; }

	[CascadingParameter]
	public Validation? ParentValidation { get; set; }

	public object? ValidationValue => Date ?? (object?)DateOnly;

	public string? GetValidationClass()
	{
		if (ParentValidation?.Status == ValidationStatus.Error)
			return "is-invalid";

		if (ParentValidation?.Status == ValidationStatus.Success)
			return "is-valid";

		return null;
	}

	public string? GetColorClass()
	{
		if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
		{
			string? token = null;
			var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

			if (isTheme && token is not null)
			{
				// Bootstrap theme token (e.g., "primary", "secondary")
				return $"form-control-{token}";
			}

			var v = BackgroundColor.Value.ToString().Trim();

			if (BackgroundColor.Value.IsCssClass)
			{
				if (v.StartsWith("form-control-", StringComparison.Ordinal))
					return v;
				return $"form-control-{v}";
			}
		}

		return null;
	}

	public string? GetSizeClass()
	{
		if (Size == Quark.Size.Default)
			return null;

		string? token = null;
		var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
		if (isTheme && token is not null)
			return $"form-control-{token}";

		return Size?.ToString() != null ? $"form-control-{Size}" : null;
	}

	private string GetCurrentValue()
	{
		if (Date.HasValue)
		{
			return InputMode.Value switch
			{
				"date" => Date.Value.ToString("yyyy-MM-dd"),
				"datetime-local" => Date.Value.ToString("yyyy-MM-ddTHH:mm"),
				"month" => Date.Value.ToString("yyyy-MM"),
				_ => Date.Value.ToString("yyyy-MM-dd")
			};
		}
		else if (DateOnly.HasValue)
		{
			return InputMode.Value switch
			{
				"date" => DateOnly.Value.ToString("yyyy-MM-dd"),
				"datetime-local" => DateOnly.Value.ToString("yyyy-MM-ddTHH:mm"),
				"month" => DateOnly.Value.ToString("yyyy-MM"),
				_ => DateOnly.Value.ToString("yyyy-MM-dd")
			};
		}
		return string.Empty;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && ParentValidation is not null)
		{
			if (DateExpression is not null)
			{
				await ParentValidation.InitializeInputExpression(DateExpression);
			}
			else if (DateOnlyExpression is not null)
			{
				await ParentValidation.InitializeInputExpression(DateOnlyExpression);
			}
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task HandleInput(ChangeEventArgs e)
	{
		var value = e.Value?.ToString();
		
		if (DateExpression is not null || Date.HasValue || DateChanged.HasDelegate)
		{
			if (DateTime.TryParse(value, out var dateValue))
			{
				Date = dateValue;
			}
			await DateChanged.InvokeIfHasDelegate(Date);
		}
		else if (DateOnlyExpression is not null || DateOnly.HasValue || DateOnlyChanged.HasDelegate)
		{
			if (System.DateOnly.TryParse(value, out var dateOnlyValue))
			{
				DateOnly = dateOnlyValue;
			}
			await DateOnlyChanged.InvokeIfHasDelegate(DateOnly);
		}

		await OnInput.InvokeIfHasDelegate(e);
	}

	private async Task HandleChange(ChangeEventArgs e)
	{
		var value = e?.Value?.ToString();
		
		if (DateExpression is not null || Date.HasValue || DateChanged.HasDelegate)
		{
			if (DateTime.TryParse(value, out var dateValue))
			{
				Date = dateValue;
			}
			await DateChanged.InvokeIfHasDelegate(Date);
		}
		else if (DateOnlyExpression is not null || DateOnly.HasValue || DateOnlyChanged.HasDelegate)
		{
			if (System.DateOnly.TryParse(value, out var dateOnlyValue))
			{
				DateOnly = dateOnlyValue;
			}
			await DateOnlyChanged.InvokeIfHasDelegate(DateOnly);
		}

		await OnChange.InvokeIfHasDelegate(e);
	}

	private string GetInputModeString()
	{
		return InputMode.Value;
	}

	private Dictionary<string, object> BuildInputAttributes()
	{
		var attributes = new Dictionary<string, object>();

		// Add current value
		var currentValue = GetCurrentValue();
		if (!string.IsNullOrEmpty(currentValue))
			attributes["value"] = currentValue;

		// Add DateEdit-specific attributes
		if (Min != default)
		{
			var minString = InputMode.Value switch
			{
				"date" => Min.ToString("yyyy-MM-dd"),
				"datetime-local" => Min.ToString("yyyy-MM-ddTHH:mm"),
				"month" => Min.ToString("yyyy-MM"),
				_ => Min.ToString("yyyy-MM-dd")
			};
			attributes["min"] = minString;
		}
		else if (MinDateOnly != default)
		{
			var minString = InputMode.Value switch
			{
				"date" => MinDateOnly.ToString("yyyy-MM-dd"),
				"datetime-local" => MinDateOnly.ToString("yyyy-MM-ddTHH:mm"),
				"month" => MinDateOnly.ToString("yyyy-MM"),
				_ => MinDateOnly.ToString("yyyy-MM-dd")
			};
			attributes["min"] = minString;
		}

		if (Max != default)
		{
			var maxString = InputMode.Value switch
			{
				"date" => Max.ToString("yyyy-MM-dd"),
				"datetime-local" => Max.ToString("yyyy-MM-ddTHH:mm"),
				"month" => Max.ToString("yyyy-MM"),
				_ => Max.ToString("yyyy-MM-dd")
			};
			attributes["max"] = maxString;
		}
		else if (MaxDateOnly != default)
		{
			var maxString = InputMode.Value switch
			{
				"date" => MaxDateOnly.ToString("yyyy-MM-dd"),
				"datetime-local" => MaxDateOnly.ToString("yyyy-MM-ddTHH:mm"),
				"month" => MaxDateOnly.ToString("yyyy-MM"),
				_ => MaxDateOnly.ToString("yyyy-MM-dd")
			};
			attributes["max"] = maxString;
		}

		if (Step > 1)
			attributes["step"] = Step;

		// Pass through Input component properties
		if (Placeholder.HasContent())
			attributes["placeholder"] = Placeholder;

		if (Disabled)
			attributes["disabled"] = true;

		if (ReadOnly)
			attributes["readonly"] = true;

		if (Required)
			attributes["required"] = true;

		if (Size != Quark.Size.Default)
			attributes["size"] = Size;

		if (PlainText)
			attributes["plaintext"] = true;

		if (FloatingLabel)
			attributes["floatinglabel"] = true;

		if (Label.HasContent())
			attributes["label"] = Label;

		return attributes;
	}

}
