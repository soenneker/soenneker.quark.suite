@using Soenneker.Utils.Debounce

@namespace Soenneker.Quark
@inherits CancellableElement

<div @attributes="BuildAttributes()">
	<input type="text"
	       value="@SearchTerm"
	       @oninput="OnSearchInputHandler"
	       placeholder="@Placeholder"
	       class="quark-table-search-input" />
</div>

@code {
	public override string? ThemeKey { get; set; } = "TableSearch";

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();
		BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => AppendClass(ref cls, "quark-table-search"));
		return attributes;
	}

	[CascadingParameter]
	private ITable? Table { get; set; }

	[Parameter]
	public string SearchTerm { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<string> SearchTermChanged { get; set; }

	[Parameter]
	public EventCallback<string> OnSearch { get; set; }

	[Parameter]
	public string Placeholder { get; set; } = "Search...";

	[Parameter]
	public int DebounceMs { get; set; } = 300;

	private readonly Debouncer _debouncer = new();

	private Task OnSearchInputHandler(ChangeEventArgs e)
	{
		var newSearchTerm = e.Value?.ToString() ?? string.Empty;

		// Update the SearchTerm immediately for binding
		if (SearchTerm != newSearchTerm)
		{
			SearchTerm = newSearchTerm;
		}

		_debouncer.Debounce(DebounceMs, async _ =>
		{
			// First, notify the parent Table if available
			if (Table != null)
			{
				await Table.HandleSearch(newSearchTerm);
			}

			// Then, invoke the OnSearch callback if provided
			if (OnSearch.HasDelegate)
				await OnSearch.InvokeAsync(newSearchTerm);
		}, false, CancellationToken);

		if (SearchTermChanged.HasDelegate)
			return SearchTermChanged.InvokeAsync(newSearchTerm);

		return Task.CompletedTask;
	}

	public override async ValueTask DisposeAsync()
	{
		await base.DisposeAsync();

		await _debouncer.DisposeAsync();
	}

}
