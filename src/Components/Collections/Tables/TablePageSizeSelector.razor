@namespace Soenneker.Quark
@inherits Element

<div @attributes="BuildAttributes()">
	<label>Show:</label>
	<select value="@PageSize" @onchange="OnPageSizeChangedHandler" >
		@for (var i = 0; i < PageSizeOptions.Length; i++)
		{
			var size = PageSizeOptions[i];
			<option value="@size" selected="@(size == PageSize)" >@size</option>
		}
	</select>
	<Span>entries per page</Span>
</div>

@code {
	public override string? ThemeKey { get; set; } = "TablePageSizeSelector";

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();
		BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => AppendClass(ref cls, "quark-table-page-size"));
		return attributes;
	}

	[CascadingParameter]
	private ITable? Table { get; set; }

	[Parameter]
	public int PageSize { get; set; } = 10;

	[Parameter]
	public EventCallback<int> PageSizeChanged { get; set; }

	[Parameter]
	public int[] PageSizeOptions { get; set; } = [10, 25, 50, 100];

	private async Task OnPageSizeChangedHandler(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out var size) && size != PageSize)
		{
			// Update PageSize for binding
			PageSize = size;

			// First, try to use the Table if available
			if (Table != null)
			{
				// The Table will handle the page size change internally
				// We just need to trigger a manual request
				await Table.HandleGoToPage(1); // Reset to first page
			}
			
			if (PageSizeChanged.HasDelegate)
			{
				await PageSizeChanged.InvokeAsync(size);
			}
		}
	}

}
