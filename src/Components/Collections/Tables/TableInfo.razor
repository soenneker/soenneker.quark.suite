@namespace Soenneker.Quark
@inherits Element

@if (ShowInfo)
{
    <div @attributes="BuildAttributes()">
        @if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            <Span>@StartRecord-@EndRecord of @TotalRecords</Span>
        }
    </div>
}

@code {
    public override string? ThemeKey { get; set; } = "TableInfo";

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => AppendClass(ref cls, "quark-table-info"));
        return attributes;
    }

    [CascadingParameter]
    private ITable? Table { get; set; }

    [Parameter]
    public bool ShowInfo { get; set; } = true;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int TotalRecords { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    // Computed properties that use Table values when available
    private int ComputedCurrentPage => Table?.CurrentPage ?? CurrentPage;
    private int ComputedTotalRecords => Table?.TotalRecordsCount ?? TotalRecords;
    private int ComputedPageSize => Table?.PageSize ?? PageSize;

    private int StartRecord => (ComputedCurrentPage - 1) * ComputedPageSize + 1;
    private int EndRecord => Math.Min(ComputedCurrentPage * ComputedPageSize, ComputedTotalRecords);
} 
