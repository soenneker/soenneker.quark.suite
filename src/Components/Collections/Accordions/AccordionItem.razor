@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IAccordionItem

<div @attributes="BuildAttributes()">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    public override string? ThemeKey { get; set; } = "AccordionItem";

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [CascadingParameter]
    public Accordion? ParentAccordion { get; set; }

    public bool IsExpanded => ParentAccordion?.IsItemExpanded(Name ?? string.Empty) ?? Expanded;

    private bool _lastIsExpanded;
    private bool _expandedChanged;

    protected override void OnParametersSet()
    {
        // Detect changes in computed expanded state to allow render
        var current = IsExpanded;
        _expandedChanged |= current != _lastIsExpanded;
        _lastIsExpanded = current;
        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        return _expandedChanged || base.ShouldRender();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _expandedChanged = false;
        
        if (firstRender && ParentAccordion != null)
        {
            ParentAccordion.RegisterItem(this);
        }
    }

    public override void Dispose()
    {
        if (ParentAccordion != null)
        {
            ParentAccordion.UnregisterItem(this);
        }
        base.Dispose();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => AppendClass(ref cls, "accordion-item"));
        return attributes;
    }
}
