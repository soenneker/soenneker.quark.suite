@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IListGroupItem

<li @attributes="BuildAttributes()" @onclick="HandleClick">
    @ChildContent
</li>

@code {
    public override string? ThemeKey { get; set; } = "ListGroupItem";

    [Parameter]
    public string? ItemName { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Active { get; set; }


    [CascadingParameter]
    protected ListGroup? ParentListGroup { get; set; }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        string? bgClass = null;
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            var v = BackgroundColor.Value.ToString().Trim();
            if (BackgroundColor.Value.IsCssClass)
            {
                bgClass = v.StartsWith("list-group-item-", StringComparison.Ordinal) ? v : $"list-group-item-{v}";
            }
        }

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "list-group-item");

            if (ParentListGroup?.Mode == ListGroupMode.Selectable)
                AppendClass(ref cls, "list-group-item-action");
            if (Active)
                AppendClass(ref cls, "active");
            if (Disabled)
                AppendClass(ref cls, "disabled");
            if (bgClass != null)
                AppendClass(ref cls, bgClass);
        });

        if (Disabled)
            attributes["aria-disabled"] = "true";

        return attributes;
    }

    protected override async Task HandleClick(MouseEventArgs e)
    {
        if (Disabled)
            return;

        if (ParentListGroup is not null && ItemName.HasContent())
            await ParentListGroup.SelectItem(ItemName);

        await base.HandleClick(e);
    }
}