@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements IRadio
@inject IRadioInterop RadioInterop

<input type="radio" @attributes="BuildAttributes()" />

@code {
	public override string? ThemeKey { get; set; } = "Radio";

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    public object? ValidationValue => Checked;

    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await RadioInterop.Initialize();
            _initialized = true;
        }

        if (firstRender && ParentValidation is not null)
        {
            await ParentValidation.InitializeInput(this);

            if (CheckedExpression is not null)
                await ParentValidation.InitializeInputExpression(CheckedExpression);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"quark-radio-{token}";

        // SizeBuilder now generates clean tokens like "lg", "sm" without prefix
        var sizeValue = Size?.ToString();
        return sizeValue.HasContent() ? $"quark-radio-{sizeValue}" : null;
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        Checked = true;
        await CheckedChanged.InvokeIfHasDelegate(Checked);

        await OnChange.InvokeIfHasDelegate(e);

        if (ParentValidation is not null)
            await ParentValidation.NotifyInputChanged(Checked);
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        AppendToClassAttr(attributes, "form-check-input");

        var sizeClass = GetSizeClass();
        if (sizeClass != null)
            AppendToClassAttr(attributes, sizeClass);
            
        var validationClass = GetValidationClass();
        if (validationClass != null)
            AppendToClassAttr(attributes, validationClass);

        if (Checked)
            attributes["checked"] = true;

        if (Disabled)
            attributes["disabled"] = true;

        if (Value.HasContent())
            attributes["value"] = Value;

        if (Name.HasContent())
            attributes["name"] = Name;

        // Keep Checked in sync when the user changes selection
        attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

        return attributes;
    }

    private string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";

        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";

        return null;
    }

}
