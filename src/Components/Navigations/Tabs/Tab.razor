@namespace Soenneker.Quark

@inherits Soenneker.Quark.Element
@implements ITab

<li @attributes="BuildAttributes()" >
    <Button
        Type="@ButtonType.Button"
        OnClick="HandleClick"
        TabIndex="@(Disabled ? -1 : null)"
        @attributes="BuildButtonAttributes()" >
        @if (IconName.HasContent())
        {
            <Icon Name="@IconName" />
        }
        @if (Title.HasContent())
        {
            @Title
        }
        else
        {
            @ChildContent
        }
    </Button>
</li>

@code {
    public override string? ThemeKey { get; set; } = "Tab";

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? IconName { get; set; }

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public bool Active { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [CascadingParameter]
    public Tabs? ParentTabs { get; set; }

    private bool IsActive => ParentTabs?.SelectedTab == Name;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Only set Target for static tabs that need Bootstrap's JavaScript
        // Dynamic tabs should not have Target set to avoid Bootstrap JS conflicts
        if (string.IsNullOrEmpty(Target) && !string.IsNullOrEmpty(Name))
        {
            // For now, we'll handle all tabs through our custom logic
            // Target will remain null for dynamic tabs
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        
        if (firstRender && ParentTabs != null)
        {
            ParentTabs.RegisterTab(this);
        }
    }

    public override void Dispose()
    {
        if (ParentTabs != null)
        {
            ParentTabs.UnregisterTab(this);
        }
        base.Dispose();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        attributes["role"] = "presentation";

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "nav-item");
            
            if (Disabled)
                AppendClass(ref cls, "disabled");
        });

        return attributes;
    }

    private IReadOnlyDictionary<string, object> BuildButtonAttributes()
    {
        var attributes = new Dictionary<string, object>();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "nav-link");
            
            if (IsActive)
                AppendClass(ref cls, "active");
            if (Disabled)
                AppendClass(ref cls, "disabled");
        });

        attributes["role"] = "tab";
        attributes["aria-controls"] = Target ?? string.Empty;
        attributes["aria-selected"] = IsActive ? "true" : "false";

        if (Disabled)
        {
            attributes["aria-disabled"] = "true";
        }

        // Only use Bootstrap's tab JavaScript for static tabs (when Target is set)
        // For dynamic tabs, we handle the switching through our own logic
        if (!string.IsNullOrEmpty(Target) && !Disabled)
        {
            attributes["data-bs-toggle"] = "tab";
            attributes["data-bs-target"] = $"#{Target}";
        }

        return attributes;
    }

    protected override async Task HandleClick(MouseEventArgs args)
    {
        if (!Disabled && ParentTabs != null && !string.IsNullOrEmpty(Name))
        {
            await ParentTabs.SelectTab(Name);
        }
    }
}
