@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IBarDropdownMenu

<div id="@ParentDropdown?.CollapseId" data-bs-parent="@CollapseParent" @attributes="BuildAttributes()">
    <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
        @ChildContent
    </ul>
</div>

@code {
    public override string? ThemeKey { get; set; } = "BarDropdownMenu";

    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public bool RightAligned { get; set; }

    [CascadingParameter]
    public BarMode Mode { get; set; } = BarMode.Horizontal;

    [CascadingParameter]
    public BarDropdown? ParentDropdown { get; set; }

    [CascadingParameter(Name = "VerticalBarCollapsed")]
    public bool VerticalBarCollapsed { get; set; }

    [CascadingParameter(Name = "CollapseParent")]
    public string? CollapseParent { get; set; }
    
    [CascadingParameter(Name = "ForceCollapseAll")]
    public bool ForceCollapseAll { get; set; }

    protected override bool ShouldRender()
    {
        // For vertical bars, always render when sidebar collapse state might change
        // The base component's render key doesn't track cascading parameters
        if (Mode != BarMode.Horizontal)
        {
            return true;
        }

        return base.ShouldRender();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        var shouldShow = Show && !VerticalBarCollapsed && !ForceCollapseAll;

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "collapse");
            
            if (shouldShow)
                AppendClass(ref cls, "show");
        });

        return attributes;
    }
}
