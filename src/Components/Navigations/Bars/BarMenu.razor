
@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IBarMenu

<div @attributes="BuildAttributes()" >
    @ChildContent
</div>

@code {
	public override string? ThemeKey { get; set; } = "BarMenu";

    [Parameter]
    public bool Right { get; set; }

    [CascadingParameter]
    public BarMode Mode { get; set; } = BarMode.Horizontal;

    [CascadingParameter]
    public bool SidebarCollapsed { get; set; }

    [CascadingParameter]
    public string? MenuId { get; set; }

    protected override bool ShouldRender()
    {
        // For vertical bars, always render when sidebar collapse state might change
        // The base component's render key doesn't track cascading parameters
        if (Mode != BarMode.Horizontal)
        {
            return true;
        }

        return base.ShouldRender();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        if (Mode == BarMode.Horizontal)
        {
            BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
            {
                AppendClass(ref cls, "collapse");
                AppendClass(ref cls, "navbar-collapse");
                
                if (Right)
                    AppendClass(ref cls, "ms-auto");
            });
            
            if (MenuId.HasContent())
                attributes["id"] = MenuId;
        }

        if (Mode != BarMode.Horizontal)
        {
            BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
            {
                AppendClass(ref cls, "d-flex");
                AppendClass(ref cls, "flex-column");
            });

            BuildStyleAttribute(attributes, (ref PooledStringBuilder sty) =>
            {
                AppendStyleDecl(ref sty, "width: 100%");
                AppendStyleDecl(ref sty, "height: 100%");
                if (SidebarCollapsed)
                    AppendStyleDecl(ref sty, "gap: 0.25rem");
            });
        }

        return attributes;
    }

}
