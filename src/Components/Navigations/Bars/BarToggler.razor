@namespace Soenneker.Quark
@using Soenneker.Blazor.Extensions.EventCallback

@inherits Soenneker.Quark.Element
@implements IBarToggler

<Button Type="@ButtonType.Button" OnClick="HandleToggle" @attributes="BuildAttributes()">
    @if (ChildContent is not null)
    {
        @ChildContent
    }
    else
    {
        <Icon Name="bars" IconStyle="@IconStyle.Solid" IconSize="@IconSize.Small" />
    }
</Button>

@code {
	public override string? ThemeKey { get; set; } = "BarToggler";

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnToggle { get; set; }

    [Parameter]
    public BarTogglerMode Mode { get; set; } = BarTogglerMode.Normal;

	[CascadingParameter]
	public BarMode BarMode { get; set; } = BarMode.Horizontal;

    [CascadingParameter]
    public Func<MouseEventArgs, Task>? BarToggleHandler { get; set; }

    [CascadingParameter]
    public string? MenuId { get; set; }

    [CascadingParameter]
    public bool SidebarCollapsed { get; set; }

    [Parameter]
    public bool? Disabled { get; set; }

    protected override bool ShouldRender()
    {
        // For vertical bars, always render when sidebar collapse state might change
        // The base component's render key doesn't track cascading parameters
        if (BarMode != BarMode.Horizontal)
        {
            return true;
        }

        return base.ShouldRender();
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "navbar-toggler");
            
            if (BarMode != BarMode.Horizontal)
            {
                AppendClass(ref cls, "sidebar-toggler");
                AppendClass(ref cls, "p-2");
                AppendClass(ref cls, "my-2");
                AppendClass(ref cls, "d-flex");
                AppendClass(ref cls, "justify-content-center");
                AppendClass(ref cls, "align-items-center");
                AppendClass(ref cls, "position-relative");
                
                if (!SidebarCollapsed)
                    AppendClass(ref cls, "w-100");
            }
            
            if (Mode == BarTogglerMode.Popout)
                AppendClass(ref cls, "navbar-toggler-popout");
        });

        if (BarMode == BarMode.Horizontal)
        {
            var target = Target.HasContent() ? Target : MenuId.HasContent() ? $"#{MenuId}" : null;
            
            if (target.HasContent())
            {
                attributes["data-bs-toggle"] = "collapse";
                attributes["data-bs-target"] = target!;
                var controls = target!.StartsWith("#") ? target.Substring(1) : target!;
                attributes["aria-controls"] = controls;
            }
        }
        else
        {
            BuildStyleAttribute(attributes, (ref PooledStringBuilder sty) =>
            {
                AppendStyleDecl(ref sty, "flex-shrink: 0");
                AppendStyleDecl(ref sty, "width: 60px");
                AppendStyleDecl(ref sty, "margin-left: 0");
                AppendStyleDecl(ref sty, "border: none");
                AppendStyleDecl(ref sty, "background: transparent");

                if (SidebarCollapsed)
                {
                    AppendStyleDecl(ref sty, "margin: 0 !important");
                    AppendStyleDecl(ref sty, "padding-left: 20px !important");
                    AppendStyleDecl(ref sty, "padding-right: 8px !important");
                    AppendStyleDecl(ref sty, "box-sizing: border-box");
                }
            });
        }

        return attributes;
    }

    private async Task HandleToggle(MouseEventArgs args)
    {
        // Use cascading handler if available, otherwise use the OnToggle parameter
        if (BarToggleHandler != null)
        {
            await BarToggleHandler(args);
        }
        else
        {
            await OnToggle.InvokeIfHasDelegate(args);
        }
        // Also invoke the standard OnClick so explicit OnClick on the component works
        await OnClick.InvokeIfHasDelegate(args);
    }

}
