@using System.Globalization
@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Input
@implements INumericEdit

@code {
    public override string? ThemeKey { get; set; } = "NumericEdit";

    [Parameter]
    public decimal? Value { get; set; }


    [Parameter]
    public decimal? Min { get; set; }

    [Parameter]
    public decimal? Max { get; set; }

    [Parameter]
    public decimal? Step { get; set; }

    [Parameter]
    public EventCallback<decimal?> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<decimal?>>? ValueExpression { get; set; }

    public override object? ValidationValue => Value;

    protected override string GetInputType()
    {
        return "number";
    }

    private static decimal? ParseDecimal(ChangeEventArgs e)
    {
        if (e?.Value == null)
            return null;

        var text = e.Value.ToString();

        if (decimal.TryParse(text, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
            return result;

        return null;
    }

    protected override async Task HandleInput(ChangeEventArgs e)
    {
        Value = ParseDecimal(e);
        await ValueChanged.InvokeIfHasDelegate(Value);
        await base.HandleInput(e);
    }

    protected override async Task HandleChange(ChangeEventArgs e)
    {
        Value = ParseDecimal(e);
        await ValueChanged.InvokeIfHasDelegate(Value);
        await base.HandleChange(e);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null && ValueExpression is not null)
        {
            await ParentValidation.InitializeInputExpression(ValueExpression);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        // Add NumericEdit-specific attributes
        if (Value.HasValue)
            attributes["value"] = Value.Value.ToString(CultureInfo.InvariantCulture);

        if (Min.HasValue)
            attributes["min"] = Min.Value.ToString(CultureInfo.InvariantCulture);

        if (Max.HasValue)
            attributes["max"] = Max.Value.ToString(CultureInfo.InvariantCulture);

        if (Step.HasValue)
            attributes["step"] = Step.Value.ToString(CultureInfo.InvariantCulture);

        return attributes;
    }


}
