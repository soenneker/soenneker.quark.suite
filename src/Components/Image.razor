@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IImage

<img @attributes="BuildAttributes()" />

@code {
	public override string? ThemeKey { get; set; } = "Image";

    [Parameter]
    public string? Source { get; set; }

    [Parameter]
    public string? Alt { get; set; }

    [Parameter]
    public bool Fluid { get; set; }

    [Parameter]
    public bool Lazy { get; set; }

    [Parameter]
    public string? Loading { get; set; }

    [Parameter]
    public string? Decoding { get; set; }

    [Parameter]
    public string? FetchPriority { get; set; }

    [Parameter]
    public string? Sizes { get; set; }

    [Parameter]
    public string? SrcSet { get; set; }

    [Parameter]
    public string? CrossOrigin { get; set; }

    [Parameter]
    public string? ReferrerPolicy { get; set; }

    [Parameter]
    public string? UseMap { get; set; }

    [Parameter]
    public bool IsMap { get; set; }

    [Parameter]
    public string? LongDesc { get; set; }

    [Parameter]
    public EventCallback<ProgressEventArgs> OnLoad { get; set; }

    [Parameter]
    public EventCallback<ErrorEventArgs> OnError { get; set; }

    [Parameter]
    public EventCallback<ProgressEventArgs> OnLoadStart { get; set; }

    [Parameter]
    public EventCallback<ProgressEventArgs> OnAbort { get; set; }

    private string? GetLoadingAttribute()
    {
        if (Lazy)
            return "lazy";
        
        return Loading;
    }

    private string? GetFluidClass()
    {
        if (Fluid)
            return "img-fluid";
        
        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Attributes = base.BuildAttributes();

        // Add default Bootstrap image classes if no class is specified
        if (!Class.HasContent())
        {
            AppendToClassAttr(Attributes, "img-thumbnail");
            var fluidClass = GetFluidClass();
            if (fluidClass != null)
                AppendToClassAttr(Attributes, fluidClass);
        }
        else
        {
            // If class is specified, still add fluid class if not already present
            var currentClass = Attributes.GetValueOrDefault("class")
                ?.ToString() ?? "";

            var fluidClass = GetFluidClass();
            if (fluidClass != null && !currentClass.Contains(fluidClass))
            {
                AppendToClassAttr(Attributes, fluidClass);
            }

        }

        // Add image-specific attributes
        if (Source.HasContent())
            Attributes["src"] = Source;

        if (Alt.HasContent())
            Attributes["alt"] = Alt;

        var loadingAttr = GetLoadingAttribute();
        if (loadingAttr.HasContent())
            Attributes["loading"] = loadingAttr;

        if (Decoding.HasContent())
            Attributes["decoding"] = Decoding;

        if (FetchPriority.HasContent())
            Attributes["fetchpriority"] = FetchPriority;

        if (Sizes.HasContent())
            Attributes["sizes"] = Sizes;

        if (SrcSet.HasContent())
            Attributes["srcset"] = SrcSet;

        if (CrossOrigin.HasContent())
            Attributes["crossorigin"] = CrossOrigin;

        if (ReferrerPolicy.HasContent())
            Attributes["referrerpolicy"] = ReferrerPolicy;

        if (UseMap.HasContent())
            Attributes["usemap"] = UseMap;

        if (IsMap)
            Attributes["ismap"] = true;

        if (LongDesc.HasContent())
            Attributes["longdesc"] = LongDesc;

        // Add event handlers
        if (OnLoad.HasDelegate)
            Attributes["onload"] = EventCallback.Factory.Create(this, OnLoad);

        if (OnError.HasDelegate)
            Attributes["onerror"] = EventCallback.Factory.Create(this, OnError);

        if (OnLoadStart.HasDelegate)
            Attributes["onloadstart"] = EventCallback.Factory.Create(this, OnLoadStart);

        if (OnAbort.HasDelegate)
            Attributes["onabort"] = EventCallback.Factory.Create(this, OnAbort);

        return Attributes;
    }
}
