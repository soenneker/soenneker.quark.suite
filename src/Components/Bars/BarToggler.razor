@namespace Soenneker.Quark
@using Soenneker.Blazor.Extensions.EventCallback

@inherits Soenneker.Quark.Element
@implements IBarToggler

<Button Type="@ButtonType.Button" OnClick="HandleToggle" @attributes="BuildAttributes()">
    @if (ChildContent is not null)
    {
        @ChildContent
    }
    else
    {
        <Icon Name="bars" IconStyle="@IconStyle.Solid" IconSize="@IconSize.Small" />
    }
</Button>

@code {
	public override string? ThemeKey { get; set; } = "BarToggler";

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnToggle { get; set; }

    [Parameter]
    public BarTogglerMode Mode { get; set; } = BarTogglerMode.Normal;

	[CascadingParameter]
	public BarMode BarMode { get; set; } = BarMode.Horizontal;

    [CascadingParameter]
    public Func<MouseEventArgs, Task>? BarToggleHandler { get; set; }

    [CascadingParameter]
    public string? MenuId { get; set; }

    [CascadingParameter]
    public bool SidebarCollapsed { get; set; }

    [Parameter]
    public bool? Disabled { get; set; }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        // Apply different classes based on bar mode
        if (BarMode == BarMode.Horizontal)
        {
            AppendToClassAttr(attributes, "navbar-toggler");
            
            // For horizontal navbars, wire up Bootstrap's collapse behavior
            var target = Target.HasContent() ? Target : MenuId.HasContent() ? $"#{MenuId}" : null;
            
            if (target.HasContent())
            {
                attributes["data-bs-toggle"] = "collapse";
                attributes["data-bs-target"] = target!;
                // aria-controls expects the id without the '#'
                var controls = target!.StartsWith("#") ? target.Substring(1) : target!;
                attributes["aria-controls"] = controls;
            }
        }
        else
        {
            // For vertical mode, use custom toggler styling
            AppendToClassAttr(attributes, "btn");
            AppendToClassAttr(attributes, "btn-outline-secondary");
            AppendToClassAttr(attributes, "border-0");
            AppendToClassAttr(attributes, "p-2");
            AppendToClassAttr(attributes, "m-2");
            
            // When sidebar is collapsed, center the toggler
            if (SidebarCollapsed)
            {
                AppendToClassAttr(attributes, "mx-auto");
            }
        }
        
        if (Mode == BarTogglerMode.Popout)
            AppendToClassAttr(attributes, "navbar-toggler-popout");

        return attributes;
    }

    private async Task HandleToggle(MouseEventArgs args)
    {
        // Use cascading handler if available, otherwise use the OnToggle parameter
        if (BarToggleHandler != null)
        {
            await BarToggleHandler(args);
        }
        else
        {
            await OnToggle.InvokeIfHasDelegate(args);
        }
        // Also invoke the standard OnClick so explicit OnClick on the component works
        await OnClick.InvokeIfHasDelegate(args);
    }

}
