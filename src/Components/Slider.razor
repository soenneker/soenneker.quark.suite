@using System.Globalization
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements ISlider

<input type="range" @attributes="BuildAttributes()" />

@code {
	public override string? ThemeKey { get; set; } = "Slider";

	[Parameter]
	public double Value { get; set; }

	[Parameter]
	public double Min { get; set; }

	[Parameter]
	public double Max { get; set; } = 100;

	[Parameter]
	public double Step { get; set; } = 1;

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public EventCallback<double> ValueChanged { get; set; }

	[Parameter]
	public EventCallback<double> OnValueChanged { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChange { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnInput { get; set; }

	private static double ParseDouble(ChangeEventArgs e)
	{
		if (e?.Value == null)
			return 0d;

		var text = e.Value.ToString();

		if (double.TryParse(text, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
			return result;

		return 0d;
	}

	private async Task HandleInput(ChangeEventArgs e)
	{
		Value = ParseDouble(e);

		await ValueChanged.InvokeIfHasDelegate(Value);
		await OnValueChanged.InvokeIfHasDelegate(Value);

		await OnInput.InvokeIfHasDelegate(e);
	}

	private async Task HandleChange(ChangeEventArgs e)
	{
		Value = ParseDouble(e);

		await ValueChanged.InvokeIfHasDelegate(Value);
		await OnValueChanged.InvokeIfHasDelegate(Value);

		await OnChange.InvokeIfHasDelegate(e);
	}

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();

		var baseClasses = "form-range";

		AppendToClassAttr(attributes, baseClasses);

		attributes["min"] = Min.ToString(CultureInfo.InvariantCulture);
		attributes["max"] = Max.ToString(CultureInfo.InvariantCulture);
		attributes["step"] = Step.ToString(CultureInfo.InvariantCulture);
		attributes["value"] = Value.ToString(CultureInfo.InvariantCulture);

		if (Disabled)
			attributes["disabled"] = true;

		// Sync value via events
		attributes["oninput"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleInput);
		attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

		return attributes;
	}

}
