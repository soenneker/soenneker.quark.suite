@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Input
@implements ITextEdit

@code {
	public override string? ThemeKey { get; set; } = "TextEdit";

	[Parameter]
	public string? Value { get; set; }

	[Parameter]
	public Expression<Func<string>>? ValueExpression { get; set; }

	[Parameter]
	public int MaxLength { get; set; }

	[Parameter]
	public EventCallback<string?> ValueChanged { get; set; }

	public override object? ValidationValue => Value;

	protected override string GetInputType()
	{
		return "text";
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && ParentValidation is not null && ValueExpression is not null)
		{
			await ParentValidation.InitializeInputExpression(ValueExpression);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	protected override async Task HandleInput(ChangeEventArgs e)
	{
		Value = e?.Value?.ToString();
		await ValueChanged.InvokeIfHasDelegate(Value);
		await base.HandleInput(e);
	}

	protected override async Task HandleChange(ChangeEventArgs e)
	{
		Value = e?.Value?.ToString();
		await ValueChanged.InvokeIfHasDelegate(Value);
		await base.HandleChange(e);
	}

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();

		// Add TextEdit-specific attributes
		if (Value.HasContent())
			attributes["value"] = Value;

		if (MaxLength > 0)
			attributes["maxlength"] = MaxLength;

		return attributes;
	}

}
