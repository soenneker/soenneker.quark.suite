@using System.Linq.Expressions
@using Soenneker.Blazor.Extensions.EventCallback

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements Soenneker.Quark.IValidationInput
@implements ITextEdit

<input type="text" @attributes="BuildAttributes()" />

@code {
	public override string? ThemeKey { get; set; } = "TextEdit";

	[Parameter]
	public string? Value { get; set; }

	[Parameter]
	public Expression<Func<string>>? ValueExpression { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool ReadOnly { get; set; }

	[Parameter]
	public bool Required { get; set; }

	[Parameter]
	public int MaxLength { get; set; }


	[Parameter]
	public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

	[Parameter]
	public bool PlainText { get; set; }

	[Parameter]
	public bool FloatingLabel { get; set; }

	[Parameter]
	public string? Label { get; set; }

	[Parameter]
	public EventCallback<string?> ValueChanged { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChange { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnInput { get; set; }

	[CascadingParameter]
	public Validation? ParentValidation { get; set; }

	public object? ValidationValue => Value;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && ParentValidation is not null)
		{
			if (ValueExpression is not null)
			{
				await ParentValidation.InitializeInputExpression(ValueExpression);
			}

			await ParentValidation.InitializeInput(this);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task HandleInput(ChangeEventArgs e)
	{
		Value = e?.Value?.ToString();

		await ValueChanged.InvokeIfHasDelegate(Value);

		if (OnInput.HasDelegate)
			await OnInput.InvokeIfHasDelegate(e);

		if (ParentValidation is not null)
			await ParentValidation.NotifyInputChanged(Value ?? string.Empty);
	}

	private async Task HandleChange(ChangeEventArgs e)
	{
		Value = e?.Value?.ToString();

		await ValueChanged.InvokeIfHasDelegate(Value);
		await OnChange.InvokeIfHasDelegate(e);

		if (ParentValidation is not null)
			await ParentValidation.NotifyInputChanged(Value ?? string.Empty);
	}

	private string? GetColorClass()
	{
		if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
		{
			string? token = null;
			var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out token);

			if (isTheme && token is not null)
			{
				// Bootstrap theme token (e.g., "primary", "secondary")
				return $"form-control-{token}";
			}

            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("form-control-", StringComparison.Ordinal))
                    return v;
                return $"form-control-{v}";
            }
        }

		return null;
	}

	private string? GetSizeClass()
	{
		if (Size == Quark.Size.Default)
			return null;

		string? token = null;
		var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
		if (isTheme && token is not null)
			return $"form-control-{token}";

		return Size?.ToString() != null ? $"form-control-{Size}" : null;
	}

	private string? GetValidationClass()
	{
		if (ParentValidation?.Status == ValidationStatus.Error)
			return "is-invalid";

		if (ParentValidation?.Status == ValidationStatus.Success)
			return "is-valid";

		return null;
	}

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();

		// Add TextEdit-specific attributes
		var baseClasses = PlainText ? "form-control-plaintext" : "form-control";
		var colorClass = GetColorClass();
		var sizeClass = GetSizeClass();
		var validationClass = GetValidationClass();

		if (colorClass != null)
			baseClasses = $"{baseClasses} {colorClass}";

		if (sizeClass != null)
			baseClasses = $"{baseClasses} {sizeClass}";

		if (validationClass != null)
			baseClasses = $"{baseClasses} {validationClass}";

		AppendToClassAttr(attributes, baseClasses);

		// Handle custom CSS colors using BackgroundColor
		if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty && !BackgroundColor.Value.IsCssClass)
		{
			var v = BackgroundColor.Value.ToString().Trim();
			// BackgroundColor already handles background-color, just add border-color
			attributes["style"] = $"border-color:{v};";
		}

		if (Value.HasContent())
			attributes["value"] = Value;

		if (Placeholder.HasContent())
			attributes["placeholder"] = Placeholder;

		if (Disabled)
			attributes["disabled"] = true;

		if (ReadOnly)
			attributes["readonly"] = true;

		if (Required)
			attributes["required"] = true;

		if (MaxLength > 0)
			attributes["maxlength"] = MaxLength;

		// Wire input/change events
		attributes["oninput"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleInput);
		attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

		return attributes;
	}

}
