@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IVideo

<video @attributes="BuildAttributes()">
	@ChildContent
</video>

@code {
	public override string? ThemeKey { get; set; } = "Video";

    [Parameter]
    public string? Source { get; set; }

    [Parameter]
    public string? Poster { get; set; }

    [Parameter]
    public bool Autoplay { get; set; }

    [Parameter]
    public bool Loop { get; set; }

    [Parameter]
    public bool Muted { get; set; }

    [Parameter]
    public bool Controls { get; set; } = true;

    [Parameter]
    public string? Preload { get; set; }

    [Parameter]
    public string? CrossOrigin { get; set; }

    [Parameter]
    public bool PlaysInline { get; set; }

    [Parameter]
    public bool DisableRemotePlayback { get; set; }

    [Parameter]
    public bool DisablePictureInPicture { get; set; }

    [Parameter]
    public EventCallback<ProgressEventArgs> OnLoadedMetadata { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnCanPlay { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnPlay { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnPause { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnEnded { get; set; }

    [Parameter]
    public EventCallback<ErrorEventArgs> OnError { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnTimeUpdate { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnVolumeChange { get; set; }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        // Add video-specific attributes
        if (Source.HasContent())
            attributes["src"] = Source;

        if (Poster.HasContent())
            attributes["poster"] = Poster;

        if (Autoplay)
            attributes["autoplay"] = true;

        if (Loop)
            attributes["loop"] = true;

        if (Muted)
            attributes["muted"] = true;

        if (Controls)
            attributes["controls"] = true;

        if (Preload.HasContent())
            attributes["preload"] = Preload;

        if (CrossOrigin.HasContent())
            attributes["crossorigin"] = CrossOrigin;

        if (PlaysInline)
            attributes["playsinline"] = true;

        if (DisableRemotePlayback)
            attributes["disableremoteplayback"] = true;

        if (DisablePictureInPicture)
            attributes["disablepictureinpicture"] = true;

        // Add event handlers
        if (OnLoadedMetadata.HasDelegate)
            attributes["onloadedmetadata"] = EventCallback.Factory.Create(this, OnLoadedMetadata);

        if (OnCanPlay.HasDelegate)
            attributes["oncanplay"] = EventCallback.Factory.Create(this, OnCanPlay);

        if (OnPlay.HasDelegate)
            attributes["onplay"] = EventCallback.Factory.Create(this, OnPlay);

        if (OnPause.HasDelegate)
            attributes["onpause"] = EventCallback.Factory.Create(this, OnPause);

        if (OnEnded.HasDelegate)
            attributes["onended"] = EventCallback.Factory.Create(this, OnEnded);

        if (OnError.HasDelegate)
            attributes["onerror"] = EventCallback.Factory.Create(this, OnError);

        if (OnTimeUpdate.HasDelegate)
            attributes["ontimeupdate"] = EventCallback.Factory.Create(this, OnTimeUpdate);

        if (OnVolumeChange.HasDelegate)
            attributes["onvolumechange"] = EventCallback.Factory.Create(this, OnVolumeChange);

        return attributes;
    }
}

