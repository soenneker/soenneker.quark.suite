@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IMemoEdit

<textarea @attributes="BuildAttributes()">@Value</textarea>

@code {
    public override string? ThemeKey { get; set; } = "MemoEdit";

	[Parameter]
	public string? Value { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool ReadOnly { get; set; }

	[Parameter]
	public bool Required { get; set; }

	[Parameter]
	public int Rows { get; set; } = 3;

	[Parameter]
	public int MaxLength { get; set; }

	[Parameter]
	public int MinLength { get; set; }

	[Parameter]
	public string? Pattern { get; set; }

	[Parameter]
	public bool AutoResize { get; set; }


	[Parameter]
	public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChange { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnInput { get; set; }

	private string? GetColorClass()
    {
        string? token = null;
        var isTheme = BackgroundColor?.TryGetBootstrapThemeToken(out token) == true;

		if (isTheme && token is not null)
			return $"form-control-{token}";

		return null;
	}

	private string? GetSizeClass()
	{
		if (Size == Quark.Size.Default)
			return null;

		string? token = null;
		var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
		if (isTheme && token is not null)
			return $"form-control-{token}";

		return Size?.ToString() != null ? $"form-control-{Size}" : null;
	}

	protected override Dictionary<string, object> BuildAttributes()
	{
		var attributes = base.BuildAttributes();

		var baseClasses = "form-control";
		var colorClass = GetColorClass();
		var sizeClass = GetSizeClass();

		if (colorClass != null)
			baseClasses = $"{baseClasses} {colorClass}";

		if (sizeClass != null)
			baseClasses = $"{baseClasses} {sizeClass}";

		AppendToClassAttr(attributes, baseClasses);

		if (Placeholder.HasContent())
			attributes["placeholder"] = Placeholder;

		if (Disabled)
			attributes["disabled"] = true;

		if (ReadOnly)
			attributes["readonly"] = true;

		if (Required)
			attributes["required"] = true;

		if (Rows > 0)
			attributes["rows"] = Rows;

		if (MaxLength > 0)
			attributes["maxlength"] = MaxLength;

		if (MinLength > 0)
			attributes["minlength"] = MinLength;

		if (Pattern.HasContent())
			attributes["pattern"] = Pattern;

		if (AutoResize)
			AppendStyleDeclAttr(attributes, "resize: vertical; min-height: 60px;");

		return attributes;
	}


}
