@using Soenneker.Utils.PooledStringBuilders
@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IBadge

<Span @attributes="BuildAttributes()" >
    @ChildContent
</Span>

@code {
	public override string? ThemeKey { get; set; } = "Badge";

    [Parameter]
    public BadgeType Type { get; set; } = BadgeType.Badge;

    [Parameter]
    public bool Rounded { get; set; }

    private string? GetTypeClass()
    {
        if (Type == BadgeType.Pill)
            return "rounded-pill";

        if (Type == BadgeType.Dot)
            return "badge-dot";

        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "badge");
            
            var typeClass = GetTypeClass();

            if (typeClass != null)
                AppendClass(ref cls, typeClass);
                
            if (Rounded)
                AppendClass(ref cls, "rounded");
        });

        return attributes;
    }

    protected override void ApplyBackgroundColor(ref PooledStringBuilder sty, ref PooledStringBuilder cls)
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            var isTheme = BackgroundColor.Value.TryGetBootstrapThemeToken(out var token);

            if (isTheme && token is not null)
            {
                // Bootstrap theme token (e.g., "primary", "secondary")
                AppendClass(ref cls, $"bg-{token}");
            }
            else
            {
                var colorValue = BackgroundColor.Value.ToString();

                if (colorValue.HasContent() && BackgroundColor.Value.IsCssClass)
                {
                    AppendClass(ref cls, $"bg-{colorValue}");
                }
            }
        }
    }

}
