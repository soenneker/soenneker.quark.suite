@using Soenneker.Extensions.String

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IDropdownItem

@if (IsLink)
{
    <a @attributes="BuildAttributes()" @onclick="OnClickHandler">
        @ChildContent
    </a>
}
else
{
    <button @attributes="BuildAttributes()" type="button" @onclick="OnClickHandler">
        @ChildContent
    </button>
}

@code {
    public override string? ThemeKey { get; set; } = "DropdownItem";

    [Parameter]
    public bool Active { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool IsLink { get; set; } = true;

    [Parameter]
    public string? Href { get; set; }

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Clicked { get; set; }

    private async Task OnClickHandler(MouseEventArgs e)
    {
        if (!Disabled && Clicked.HasDelegate)
        {
            await Clicked.InvokeAsync(e);
        }
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        var baseClasses = "dropdown-item";

        if (Active)
            baseClasses = $"{baseClasses} active";

        if (Disabled)
            baseClasses = $"{baseClasses} disabled";

        AppendToClassAttr(attributes, baseClasses);

        if (Disabled)
        {
            attributes["aria-disabled"] = "true";
        }

        if (IsLink && Href.HasContent())
        {
            attributes["href"] = Href;
        }

        if (IsLink && Target.HasContent())
        {
            attributes["target"] = Target;
        }

        if (Active)
        {
            attributes["aria-current"] = "page";
        }

        return attributes;
    }
}
