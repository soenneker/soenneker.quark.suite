@namespace Soenneker.Quark
@inherits ToggleElement
@implements Soenneker.Quark.IValidationInput
@using Soenneker.Blazor.Extensions.EventCallback
@implements ICheck
@inject ICheckInterop CheckInterop

<div @attributes="BuildWrapperAttributes()">
    <input
        @ref="_inputRef"
        id="@Id"
        type="checkbox"
        checked="@Checked"
        @onclick="HandleClick"
        @onchange="HandleChange"
        @attributes="BuildInputAttributes()"/>

    @if (ChildContent is not null)
    {
        <label @attributes="BuildLabelAttributes()">@ChildContent</label>
    }
    else if (Label.HasContent())
    {
        <label @attributes="BuildLabelAttributes()">@Label</label>
    }
</div>

@code {
    public override string? ThemeKey { get; set; } = "Check";
    public override string? Id { get; set; } = $"check-{Guid.NewGuid():N}";

    [Parameter]
    public bool Indeterminate { get; set; }

    [Parameter]
    public CssValue<SizeBuilder>? Size { get; set; } = Quark.Size.Default;

    [Parameter]
    public bool Switch { get; set; }

    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public bool Reverse { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [CascadingParameter]
    public Validation? ParentValidation { get; set; }

    public object? ValidationValue => Checked;

    private ElementReference _inputRef;
    private bool _initialized;
    private bool _lastChecked;
    private bool _checkedChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await CheckInterop.Initialize();

            _initialized = true;
        }

        if (firstRender && ParentValidation is not null)
        {
            if (CheckedExpression is not null)
                await ParentValidation.InitializeInputExpression(CheckedExpression);

            await ParentValidation.InitializeInput(this);
            ParentValidation.ValidationStatusChanged += OnParentValidationStatusChanged;
        }

        _checkedChanged = false; // reset local render gate after any render
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        // detect programmatic changes from parent (@bind updates, button clicks, etc.)
        if (Checked != _lastChecked)
        {
            _checkedChanged = true;
            _lastChecked = Checked;
        }

        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        // Render if value changed, or fallback to base gating (theme, attrs, etc.)
        return _checkedChanged || base.ShouldRender();
    }

    private void OnParentValidationStatusChanged(object? s, ValidationStatusChangedEventArgs e) => InvokeAsync(StateHasChanged);

    public virtual Dictionary<string, object> BuildWrapperAttributes()
    {
        var attributes = new Dictionary<string, object>();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "form-check");
            if (Switch)
                AppendClass(ref cls, "form-switch");
            if (Inline)
                AppendClass(ref cls, "form-check-inline");
        });

        if (Id.HasContent())
            attributes["id"] = $"{Id}-wrapper";
        if (Style.HasContent())
            attributes["style"] = Style;
        return attributes;
    }

    public virtual Dictionary<string, object> BuildLabelAttributes()
    {
        var attributes = new Dictionary<string, object>();
        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) => { AppendClass(ref cls, "form-check-label"); });
        attributes["for"] = Id!;
        return attributes;
    }

    public virtual Dictionary<string, object> BuildInputAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "form-check-input");

            var sizeClass = GetSizeClass();
            if (sizeClass != null)
                AppendClass(ref cls, sizeClass);

            var validationClass = GetValidationClass();
            if (validationClass != null)
                AppendClass(ref cls, validationClass);
        });

        if (Disabled)
            attributes["disabled"] = true;
        return attributes;
    }

    private string? GetValidationClass()
    {
        if (ParentValidation?.Status == ValidationStatus.Error)
            return "is-invalid";
        if (ParentValidation?.Status == ValidationStatus.Success)
            return "is-valid";
        return null;
    }

    private string? GetSizeClass()
    {
        if (Size == Quark.Size.Default)
            return null;

        string? token = null;
        var isTheme = Size?.TryGetBootstrapThemeToken(out token) == true;
        if (isTheme && token is not null)
            return $"quark-check-{token}";

        var sizeValue = Size?.ToString();
        return sizeValue.HasContent() ? $"quark-check-{sizeValue}" : null;
    }

    protected override async Task HandleClick(MouseEventArgs args)
    {
        if (Disabled)
            return;

        Checked = !Checked;
        await CheckedChanged.InvokeAsync(Checked);

        // Ensure immediate visual update even if base render gate would skip
        _checkedChanged = true;
        StateHasChanged();

        if (ParentValidation is not null)
        {
            ParentValidation.MarkTouched();
            await ParentValidation.NotifyInputChanged(Checked);
        }
    }

    private async Task HandleChange(ChangeEventArgs args)
    {
        await OnChange.InvokeIfHasDelegate(args);
    }

    public override void Dispose()
    {
        base.Dispose();
        if (ParentValidation is not null)
            ParentValidation.ValidationStatusChanged -= OnParentValidationStatusChanged;
    }

}