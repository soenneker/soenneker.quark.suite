@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Utils.PooledStringBuilders

@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IAlert

@if (Visible)
{
    <CascadingValue Value="@this" IsFixed>
        <Div @attributes="BuildAttributes()" role="alert" >
            @if (Dismissible)
            {
                <Button Type="@ButtonType.Button" Class="btn-close" OnClick="HandleDismiss" aria-label="Close" ></Button>
            }
            @ChildContent
        </Div>
    </CascadingValue>
}

@code {
	public override string? ThemeKey { get; set; } = "Alert";

    // Internal state tracking for child components
    private bool _hasMessage;
    private bool _hasDescription;

    [Parameter]
    public CssValue<AlertStyleBuilder>? AlertStyle { get; set; }

    [Parameter]
    public bool Dismissible { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnDismiss { get; set; }
    
    protected override bool ShouldRender()
    {
        // Alert has internal state (_hasMessage, _hasDescription) that can change
        // and isn't tracked by the render key, so allow re-renders
        return true;
    }
    
    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        BuildClassAttribute(attributes, (ref PooledStringBuilder cls) =>
        {
            AppendClass(ref cls, "alert");
            
            if (Dismissible)
            {
                AppendClass(ref cls, "alert-dismissible");
                AppendClass(ref cls, "fade");
            }
            if (Dismissible && Visible)
                AppendClass(ref cls, "show");
            if (_hasMessage)
                AppendClass(ref cls, "alert-has-message");
            if (_hasDescription)
                AppendClass(ref cls, "alert-has-description");
            if (AlertStyle is not null && !AlertStyle.Value.IsEmpty)
                AppendClass(ref cls, AlertStyle.Value.ToString());
        });

        return attributes;
    }

    public Task Show()
    {
        if (Visible)
            return Task.CompletedTask;

        Visible = true;
        return InvokeAsync(StateHasChanged);
    }

    public Task Hide()
    {
        if (!Visible)
            return Task.CompletedTask;

        Visible = false;
        return InvokeAsync(StateHasChanged);
    }

    public Task Toggle()
    {
        Visible = !Visible;
        return InvokeAsync(StateHasChanged);
    }
    
    internal void NotifyHasMessage()
    {
        _hasMessage = true;
        InvokeAsync(StateHasChanged);
    }

    internal void NotifyHasDescription()
    {
        _hasDescription = true;
        InvokeAsync(StateHasChanged);
    }


    private async Task HandleDismiss()
    {
        Visible = false;

        await OnDismiss.InvokeIfHasDelegate();
        await VisibleChanged.InvokeAsync(Visible);
    }

    protected override void ApplyBackgroundColor(ref PooledStringBuilder sty, ref PooledStringBuilder cls)
    {
        if (BackgroundColor is not null && !BackgroundColor.Value.IsEmpty)
        {
            var v = BackgroundColor.Value.ToString().Trim();

            if (BackgroundColor.Value.IsCssClass)
            {
                if (v.StartsWith("alert-", StringComparison.Ordinal))
                    AppendClass(ref cls, v);
                else
                    AppendClass(ref cls, $"alert-{v}");
            }
            else
            {
                // Build style efficiently - BackgroundColor already handles background-color
                AppendStyleDecl(ref sty, $"border-color:{v}");
                AppendStyleDecl(ref sty, "color:white");
            }
        }
    }

}
