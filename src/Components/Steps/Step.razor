@using Soenneker.Extensions.String
@namespace Soenneker.Quark

@inherits Soenneker.Quark.Element
@implements IStep
@implements IDisposable

<UnorderedListItem Class="@GetStepClasses()">
    <Anchor Class="@GetStepLinkClasses()" OnClick="@HandleStepClick" role="tab" aria-selected="@(Active ? "true" : "false")" aria-current="@(Active ? "step" : null)" @attributes="BuildAttributes()">
        <Div Class="@GetMarkerClasses()">
            @if (Marker != null)
            {
                @Marker
            }
            else
            {
                @if (Completed)
                {
                    <Span>âœ“</Span>
                }
                else if (Index.HasValue)
                {
                    <Span>@Index.Value</Span>
                }
                else
                {
                    <Span>@CalculatedIndex</Span>
                }
            }
        </Div>
        
        @if (Caption != null || Title.HasContent())
        {
            <Div Class="@GetDescriptionClasses()">
                @if (Caption != null)
                {
                    @Caption
                }
                else
                {
                    @if (Title.HasContent())
                    {
                        <Div Class="step-title">@Title</Div>
                    }
                    @ChildContent
                }
            </Div>
        }
        else
        {
            @ChildContent
        }
    </Anchor>
</UnorderedListItem>

@code {
	public override string? ThemeKey { get; set; } = "Step";

	[Parameter]
	public string? Name { get; set; }

    private StepState? _parentStepsState;

    [Parameter]
    public int? Index { get; set; }

    [Parameter]
    public bool Completed { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public CssValue<ColorBuilder> Color { get; set; } = Quark.Color.Primary;

    [Parameter]
    public StepStatus Status { get; set; } = StepStatus.Pending;

    [Parameter]
    public EventCallback<MouseEventArgs> OnStepClick { get; set; }

    [Parameter]
    public RenderFragment? Marker { get; set; }

    [Parameter]
    public RenderFragment? Caption { get; set; }

    [CascadingParameter]
    public StepState? ParentStepsState
    {
        get => _parentStepsState;
        set
        {
            if (_parentStepsState == value)
                return;

            _parentStepsState = value;
            StateHasChanged();
        }
    }

    [CascadingParameter]
    public Steps? ParentSteps { get; set; }

    private bool Active => _parentStepsState?.SelectedStep == Name;

    private int CalculatedIndex => Index ?? ParentSteps?.IndexOfStep(Name ?? string.Empty) ?? 1;

    private string GetStepClasses()
    {
        var attributes = new Dictionary<string, object>();
        AppendToClassAttr(attributes, "nav-item");
        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    private string GetStepLinkClasses()
    {
        var attributes = new Dictionary<string, object>();
        
        AppendToClassAttr(attributes, "nav-link");
        AppendToClassAttr(attributes, "rounded-pill");
        AppendToClassAttr(attributes, "px-3");
        AppendToClassAttr(attributes, "py-2");
        AppendToClassAttr(attributes, "d-flex");
        AppendToClassAttr(attributes, "align-items-center");
        AppendToClassAttr(attributes, "gap-2");
        AppendToClassAttr(attributes, "text-body-secondary");

        if (Active)
        {
            AppendToClassAttr(attributes, "active");
            AppendToClassAttr(attributes, "fw-semibold");
        }
        else
        {
            AppendToClassAttr(attributes, "opacity-75");
        }

        if (Completed)
            AppendToClassAttr(attributes, "text-success");

        if (Disabled)
            AppendToClassAttr(attributes, "disabled");

        if (Status != StepStatus.Pending)
            AppendToClassAttr(attributes, $"step-{Status.Value}");

        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    private string GetMarkerClasses()
    {
        var attributes = new Dictionary<string, object>();
        
        AppendToClassAttr(attributes, "step-marker");

        string? token = null;
        var isTheme = Color.TryGetBootstrapThemeToken(out token);

        if (isTheme && token is not null)
            AppendToClassAttr(attributes, $"step-marker-{token}");

        if (Active)
            AppendToClassAttr(attributes, "step-marker-active");

        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    private static string GetDescriptionClasses()
    {
        return "step-description";
    }

    private async Task HandleStepClick(MouseEventArgs args)
    {
        await OnStepClick.InvokeAsync(args);

        if (ParentSteps != null && Name.HasContent())
        {
            await ParentSteps.SelectStep(Name);
        }
    }

    protected override void OnInitialized()
    {
        ParentSteps?.NotifyStepInitialized(Name ?? string.Empty);
        base.OnInitialized();
    }

    public override void Dispose()
    {
        ParentSteps?.NotifyStepRemoved(Name ?? string.Empty);
    }
}
