@namespace Soenneker.Quark

@inherits Soenneker.Quark.Element
@implements IStep

<UnorderedListItem Class="@GetStepClasses()">
    <Anchor To="@GetHref()" Class="@GetStepLinkClasses()" OnClick="@(IsClickable ? HandleStepClick : null)" role="tab" aria-selected="@(Active ? "true" : "false")" aria-current="@(Active ? "step" : null)" @attributes="BuildAttributes()">
        @ChildContent
    </Anchor>
</UnorderedListItem>

@code {
    public override string? ThemeKey { get; set; } = "Step";

    [Parameter]
    public string? Name { get; set; }

    private StepsState? _parentStepsState;

    [Parameter]
    public int? Index { get; set; }

    [Parameter]
    public bool Completed { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Clicked { get; set; }

    [CascadingParameter]
    public StepsState? ParentStepsState
    {
        get => _parentStepsState;
        set
        {
            if (_parentStepsState == value)
                return;

            _parentStepsState = value;
            AriaDescribedBy = _parentStepsState?.SelectedStep;
            StateHasChanged();
            
        }
    }

    [CascadingParameter]
    public Steps? ParentSteps { get; set; }

    private bool Active 
    { 
        get 
        {
            var isActive = _parentStepsState?.SelectedStep == Name && !string.IsNullOrEmpty(Name);
            return isActive;
        }
    }

    private bool IsClickable => Clicked.HasDelegate;

    private int CalculatedIndex => Index ?? ParentSteps?.IndexOfStep(Name ?? string.Empty) ?? 1;

    private static string GetStepClasses()
    {
        var attributes = new Dictionary<string, object>();
        AppendToClassAttr(attributes, "step-item");
        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    private string GetStepLinkClasses()
    {
        var attributes = new Dictionary<string, object>();
        
        if (Active)
        {
            AppendToClassAttr(attributes, "active");
        }

        if (Completed)
            AppendToClassAttr(attributes, "text-success");

        if (Disabled)
            AppendToClassAttr(attributes, "disabled");

        if (!IsClickable)
            AppendToClassAttr(attributes, "non-clickable");

        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    private string? GetHref()
    {
        return Name.HasContent() ? $"#{Name}" : null;
    }

    private async Task HandleStepClick(MouseEventArgs args)
    {
        await Clicked.InvokeAsync(args);

        if (ParentSteps != null && Name.HasContent())
        {
            await ParentSteps.SelectStep(Name);
        }
    }

    protected override void OnInitialized()
    {
        ParentSteps?.NotifyStepInitialized(Name ?? string.Empty);
        base.OnInitialized();
    }

    public override void Dispose()
    {
        ParentSteps?.NotifyStepRemoved(Name ?? string.Empty);
    }
}
