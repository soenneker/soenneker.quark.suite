@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IStepPanel

<Div Class="@GetStepPanelClasses()" @attributes="BuildAttributes()">
    @ChildContent
</Div>

@code {
    public override string? ThemeKey { get; set; } = "StepPanel";

    private StepState? _parentStepsState;
    private StepContentState? _parentStepContentState;
    private bool _lazyLoaded;

    [Parameter]
    public string Name { get; set; } = string.Empty;

    [CascadingParameter]
    public StepState? ParentStepsState
    {
        get => _parentStepsState;
        set
        {
            if (_parentStepsState == value)
                return;

            _parentStepsState = value;
            // Nudge render key so this component re-renders when the selected step changes
            AriaDescribedBy = _parentStepsState?.SelectedStep;
            StateHasChanged();
        }
    }

    [CascadingParameter]
    public StepContentState? ParentStepContentState
    {
        get => _parentStepContentState;
        set
        {
            if (_parentStepContentState == value)
                return;

            _parentStepContentState = value;
            // Nudge render key so this component re-renders when the selected panel changes
            AriaDescribedBy = _parentStepContentState?.SelectedPanel;
            StateHasChanged();
        }
    }

    [CascadingParameter]
    public Steps? ParentSteps { get; set; }

    [CascadingParameter]
    public StepContent? ParentStepContent { get; set; }

    private bool Active => _parentStepsState?.SelectedStep == Name || _parentStepContentState?.SelectedPanel == Name;

    private StepRenderMode RenderMode => _parentStepsState?.RenderMode ?? StepRenderMode.Default;

    private string GetStepPanelClasses()
    {
        var attributes = new Dictionary<string, object>();
        
        AppendToClassAttr(attributes, "tab-pane");
        AppendToClassAttr(attributes, "fade");

        if (Active)
        {
            AppendToClassAttr(attributes, "show");
            AppendToClassAttr(attributes, "active");
        }

        return attributes.TryGetValue("class", out var classValue) ? classValue.ToString() ?? string.Empty : string.Empty;
    }

    protected override void OnInitialized()
    {
        ParentStepContent?.NotifyStepPanelInitialized(Name);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Active)
            _lazyLoaded = RenderMode.Equals(StepRenderMode.LazyLoad);

        base.OnParametersSet();
    }

    public override void Dispose()
    {
        ParentStepContent?.NotifyStepPanelRemoved(Name);
    }
}
