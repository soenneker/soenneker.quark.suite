@page "/input-demo"

<Container Padding="Padding.Is4.OnY">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">Input</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the Input component for basic text input fields.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>Basic Input Fields</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="basicInput" Class="form-label">Basic Input</Label>
                        <Input Id="basicInput" Placeholder="Enter some text..." @bind-Value="basicValue" />
                        <Small Class="form-text text-muted">Current value: @basicValue</Small>
                    </Div>
                    <Div Class="mb-3">
                        <Label For="readonlyInput" Class="form-label">Read-only Input</Label>
                        <Input Id="readonlyInput" Value="This is read-only" ReadOnly />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="disabledInput" Class="form-label">Disabled Input</Label>
                        <Input Id="disabledInput" Value="This is disabled" Disabled />
                    </Div>
                </Div>
                <Paragraph Class="text-muted">The Input component creates HTML &lt;input&gt; elements for text input.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Input Types</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="textInput" Class="form-label">Text Input</Label>
                        <Input Id="textInput" Type="text" Placeholder="Text input" @bind-Value="textValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="passwordInput" Class="form-label">Password Input</Label>
                        <Input Id="passwordInput" Type="password" Placeholder="Enter password" @bind-Value="passwordValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="emailInput" Class="form-label">Email Input</Label>
                        <Input Id="emailInput" Type="email" Placeholder="Enter email" @bind-Value="emailValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="numberInput" Class="form-label">Number Input</Label>
                        <Input Id="numberInput" Type="number" Placeholder="Enter number" @bind-Value="numberValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="telInput" Class="form-label">Telephone Input</Label>
                        <Input Id="telInput" Type="tel" Placeholder="Enter phone number" @bind-Value="telValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="urlInput" Class="form-label">URL Input</Label>
                        <Input Id="urlInput" Type="url" Placeholder="Enter URL" @bind-Value="urlValue" />
                    </Div>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Input with Validation</H2>
                <Validations Model="_validationModel">
                    <Div Margin="Margin.Is3.FromEnd">
                        <Div Class="mb-3">
                            <Label For="requiredInput" Class="form-label">Required Field <Span Class="text-danger">*</Span></Label>
                            <Validation Action="@ValidateRequired">
                                <Input Id="requiredInput" Placeholder="This field is required" @bind-Value="_validationModel.RequiredField" />
                                <ValidationError />
                            </Validation>
                        </Div>
                        <Div Class="mb-3">
                            <Label For="emailValidation" Class="form-label">Email Validation</Label>
                            <Validation Action="@ValidateEmail">
                                <Input Id="emailValidation" Type="email" Placeholder="Enter valid email" @bind-Value="_validationModel.EmailField" />
                                <ValidationError />
                            </Validation>
                        </Div>
                    </Div>
                </Validations>
            </Div>

            <Hr/>

            <Div>
                <H2>Input with Different Sizes</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="smallInput" Class="form-label">Small Input</Label>
                        <Input Id="smallInput" Class="form-control-sm" Placeholder="Small input" @bind-Value="smallValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="normalInput" Class="form-label">Normal Input</Label>
                        <Input Id="normalInput" Placeholder="Normal input" @bind-Value="normalValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="largeInput" Class="form-label">Large Input</Label>
                        <Input Id="largeInput" Class="form-control-lg" Placeholder="Large input" @bind-Value="largeValue" />
                    </Div>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Input with Custom Styling</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="customInput" Class="form-label">Custom Styled Input</Label>
                        <Input Id="customInput" 
                               Class="custom-input" 
                               Style="border: 2px solid #6f42c1; border-radius: 10px; padding: 10px; background-color: #f8f9fa;" 
                               Placeholder="Custom styled input" 
                               @bind-Value="customValue" />
                    </Div>
                    <Div Class="mb-3">
                        <Label For="gradientInput" Class="form-label">Gradient Border Input</Label>
                        <Input Id="gradientInput" 
                               Class="gradient-input" 
                               Style="border: 2px solid transparent; background: linear-gradient(white, white) padding-box, linear-gradient(135deg, #667eea, #764ba2) border-box; border-radius: 8px;" 
                               Placeholder="Gradient border input" 
                               @bind-Value="gradientValue" />
                    </Div>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Input with Icons and Add-ons</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="iconInput" Class="form-label">Input with Icon</Label>
                        <Div Class="input-group">
                            <Span Class="input-group-text">
                                <Icon Name="search" />
                            </Span>
                            <Input Id="iconInput" Placeholder="Search..." @bind-Value="searchValue" />
                        </Div>
                    </Div>
                    <Div Class="mb-3">
                        <Label For="currencyInput" Class="form-label">Currency Input</Label>
                        <Div Class="input-group">
                            <Span Class="input-group-text">$</Span>
                            <Input Id="currencyInput" Type="number" Placeholder="0.00" @bind-Value="currencyValue" />
                            <Span Class="input-group-text">.00</Span>
                        </Div>
                    </Div>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Input Events</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="eventInput" Class="form-label">Input with Events</Label>
                        <Input Id="eventInput" 
                               Placeholder="Type here to see events" 
                               @bind-Value="eventValue"
                               @oninput="HandleInput"
                               @onfocus="HandleFocus"
                               @onblur="HandleBlur" />
                        <Small Class="form-text text-muted">
                            Events: Input(@inputCount), Focus(@focusCount), Blur(@blurCount)
                        </Small>
                    </Div>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Input Component Properties</H2>
                <Div BackgroundColor="BackgroundColor.Light" Padding="Padding.Is3" Margin="Margin.Is3.FromBottom">
                    <H3>Input Features</H3>
                    <Paragraph>The Input component inherits all properties from the Element base class plus:</Paragraph>
                    <UnorderedList>
                        <UnorderedListItem><Strong>Type:</Strong> Input type (text, password, email, number, etc.)</UnorderedListItem>
                        <UnorderedListItem><Strong>Value:</Strong> Input value</UnorderedListItem>
                        <UnorderedListItem><Strong>Placeholder:</Strong> Placeholder text</UnorderedListItem>
                        <UnorderedListItem><Strong>ReadOnly:</Strong> Read-only state</UnorderedListItem>
                        <UnorderedListItem><Strong>Disabled:</Strong> Disabled state</UnorderedListItem>
                        <UnorderedListItem><Strong>Required:</Strong> Required validation</UnorderedListItem>
                        <UnorderedListItem><Strong>AutoComplete:</Strong> Auto-complete behavior</UnorderedListItem>
                        <UnorderedListItem><Strong>MaxLength:</Strong> Maximum character length</UnorderedListItem>
                        <UnorderedListItem><Strong>Pattern:</Strong> Input pattern validation</UnorderedListItem>
                        <UnorderedListItem><Strong>Event Handlers:</Strong> Input, focus, blur, change events</UnorderedListItem>
                    </UnorderedList>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Accessibility Features</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Label For="accessibleInput" Class="form-label">Accessible Input</Label>
                        <Input Id="accessibleInput" 
                               Placeholder="Accessible input field" 
                               AriaLabel="Enter your information"
                               AriaDescribedBy="input-help"
                               @bind-Value="accessibleValue" />
                        <Small Id="input-help" Class="form-text text-muted">This input has proper ARIA attributes for accessibility.</Small>
                    </Div>
                </Div>
            </Div>
        </Column>
    </Row>
</Container>

@code {
    private string basicValue = string.Empty;
    private string textValue = string.Empty;
    private string passwordValue = string.Empty;
    private string emailValue = string.Empty;
    private string numberValue = string.Empty;
    private string telValue = string.Empty;
    private string urlValue = string.Empty;
    private string smallValue = string.Empty;
    private string normalValue = string.Empty;
    private string largeValue = string.Empty;
    private string customValue = string.Empty;
    private string gradientValue = string.Empty;
    private string searchValue = string.Empty;
    private string currencyValue = string.Empty;
    private string eventValue = string.Empty;
    private string accessibleValue = string.Empty;

    private int inputCount = 0;
    private int focusCount = 0;
    private int blurCount = 0;

    private ValidationModel _validationModel = new();

    private void HandleInput(ChangeEventArgs e)
    {
        inputCount++;
        StateHasChanged();
    }

    private void HandleFocus(FocusEventArgs e)
    {
        focusCount++;
        StateHasChanged();
    }

    private void HandleBlur(FocusEventArgs e)
    {
        blurCount++;
        StateHasChanged();
    }

    private void ValidateRequired(ValidatorEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "This field is required.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private void ValidateEmail(ValidatorEventArgs e)
    {
        var email = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(email))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Email is required.";
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please enter a valid email address.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    public class ValidationModel
    {
        public string RequiredField { get; set; } = string.Empty;
        public string EmailField { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
    }
}
