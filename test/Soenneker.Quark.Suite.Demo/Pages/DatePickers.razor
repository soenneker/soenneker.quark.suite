@page "/datepickers"

<Container Class="py-4">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">Date Pickers</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the DatePicker and DateTimePicker components.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>ðŸ§ª BINDING TEST SECTION</H2>
                <Alert Color="Color.Info" Margin="Margin.Is3.FromEnd">
                    <strong>Test Instructions:</strong> Select dates below or click "Load Test Data" to verify binding works.
                </Alert>

<div class="mb-4 p-3 bg-light rounded">
    <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>
    
    <Div Margin="Margin.Is3.FromBottom">
        <Label For="testDatePicker1" Class="form-label fw-bold">Test DatePicker 1:</Label>
        <DatePicker @bind-Value="_testDatePicker1" />
        <div class="mt-2 p-2 bg-white rounded">
            <strong>Bound Value:</strong> <code>@(_testDatePicker1?.ToString("yyyy-MM-dd") ?? "(empty)")</code>
        </div>
    </Div>

    <Div Margin="Margin.Is3.FromBottom">
        <Label For="testDatePicker2" Class="form-label fw-bold">Test DatePicker 2 (Pre-set to today):</Label>
        <DatePicker @bind-Value="_testDatePicker2" />
        <div class="mt-2 p-2 bg-white rounded">
            <strong>Bound Value:</strong> <code>@(_testDatePicker2?.ToString("yyyy-MM-dd") ?? "(empty)")</code>
        </div>
    </Div>

    <Div Margin="Margin.Is3.FromTop">
        <Button Color="Color.Primary" OnClick="LoadDatePickerTestData" Margin="Margin.Is2.FromEnd">Load Test Data</Button>
        <Button Color="Color.Secondary" OnClick="ClearDatePickerTestData" Margin="Margin.Is2.FromEnd">Clear Test Data</Button>
        <Button Color="Color.Warning" OnClick="UpdateDatePickerTestData">Update to Random Dates</Button>
    </Div>
    
    <div class="mt-3 p-3 bg-success bg-opacity-10 rounded">
        <H4>Test Results:</H4>
        <ul class="mb-0">
            <li><strong>DatePicker 1:</strong> @(_testDatePicker1?.ToString("yyyy-MM-dd") ?? "(not set)")</li>
            <li><strong>DatePicker 2:</strong> @(_testDatePicker2?.ToString("yyyy-MM-dd") ?? "(not set)")</li>
        </ul>
    </div>
</div>

<Hr />

                <Section Class="mb-4 mb-md-5">
                    <Row Gap="Gap.Is4">
                        <Column ColumnSize="@ColumnSize.Is6.OnLaptop">
                            <Div Class="demo-card p-4 p-md-4 h-100">
                                <H3 Class="card-title">DateOnly</H3>
                                <Paragraph Class="section-subtitle mb-3">Simple date selection with a lightweight UI.</Paragraph>
                                <Div Class="mb-2">
                                    <Label Class="form-label">Pick a date</Label>
                                    <DatePicker @bind-Value="_dateOnly"/>
                                </Div>
                                <Div Class="value-chip mt-2">
                                    <Span Class="dot"></Span><Span>Value: @_dateOnly?.ToString("yyyy-MM-dd")</Span>
                                </Div>
                            </Div>
                        </Column>
                        <Column ColumnSize="@ColumnSize.Is6.OnLaptop">
                            <Div Class="demo-card p-4 p-md-4 h-100">
                                <H3 Class="card-title">DateTime</H3>
                                <Paragraph Class="section-subtitle mb-3">Choose both date and time in one control.</Paragraph>
                                <Div Class="mb-2">
                                    <Label Class="form-label">Pick a date and time</Label>
                                    <DateTimePicker @bind-Value="_dateTime"/>
                                </Div>
                                <Div Class="value-chip mt-2">
                                    <Span Class="dot"></Span><Span>Value: @_dateTime?.ToString("yyyy-MM-dd HH:mm:ss")</Span>
                                </Div>
                            </Div>
                        </Column>
                    </Row>
                </Section>
            </Div>
        </Column>
    </Row>
</Container>

@code{
    // Binding Test Fields
    private DateOnly? _testDatePicker1;
    private DateOnly? _testDatePicker2 = DateOnly.FromDateTime(DateTime.Today);

    private DateOnly? _dateOnly = DateOnly.FromDateTime(DateTime.Today);
    private DateTime? _dateTime = DateTime.Now;

    private DateOnly? _validatedDate;
    private DateTime? _validatedDateTime;

    private void LoadDatePickerTestData()
    {
        _testDatePicker1 = DateOnly.FromDateTime(new DateTime(2025, 12, 25));
        _testDatePicker2 = DateOnly.FromDateTime(new DateTime(2026, 1, 1));
    }
    
    private void ClearDatePickerTestData()
    {
        _testDatePicker1 = null;
        _testDatePicker2 = null;
    }
    
    private void UpdateDatePickerTestData()
    {
        var random = new Random();
        _testDatePicker1 = DateOnly.FromDateTime(DateTime.Today.AddDays(random.Next(-365, 365)));
        _testDatePicker2 = DateOnly.FromDateTime(DateTime.Today.AddDays(random.Next(-365, 365)));
    }

    private void ValidateDate(ValidatorEventArgs e)
    {
        if (_validatedDate is null)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Date is required.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private void ValidateDateTime(ValidatorEventArgs e)
    {
        if (_validatedDateTime is null)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Date/time is required.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

}