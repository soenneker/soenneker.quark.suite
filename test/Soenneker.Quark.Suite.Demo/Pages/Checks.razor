@page "/checks"
@using Microsoft.Extensions.Logging

@inject ILogger<Index> Logger

<Container Class="py-4">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">Checks</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the Check component - a checkbox input wrapper.</Paragraph>
            </Div>
        </Column>
    </Row>
    
    <Row Gap="Gap.Is4">
        <Column>
            <Div>

<H2>Basic Checkbox</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked1" />
    <Label Class="form-check-label" For="check1">
        Basic checkbox
    </Label>
</Div>
<Paragraph>Checked: @isChecked1</Paragraph>

<Br />

<H2>Different Colors</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked2" BackgroundColor="@BackgroundColor.Primary" />
    <Label Class="form-check-label">
        Primary
    </Label>
</Div>
<Div Class="form-check">
    <Check @bind-Checked="isChecked3" BackgroundColor="@BackgroundColor.Secondary" />
    <Label Class="form-check-label">
        Secondary
    </Label>
</Div>
<Div Class="form-check">
    <Check @bind-Checked="isChecked4" BackgroundColor="@BackgroundColor.Success" />
    <Label Class="form-check-label">
        Success
    </Label>
</Div>
<Div Class="form-check">
    <Check @bind-Checked="isChecked5" BackgroundColor="@BackgroundColor.Danger" />
    <Label Class="form-check-label">
        Danger
    </Label>
</Div>

<Br />

<H2>Different Sizes</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked6" Size="@Size.Small" />
    <Label Class="form-check-label">
        Small
    </Label>
</Div>
<Div Class="form-check">
    <Check @bind-Checked="isChecked7" Size="@Size.Default" />
    <Label Class="form-check-label">
        Default
    </Label>
</Div>
<Div Class="form-check">
    <Check @bind-Checked="isChecked8" Size="@Size.Large" />
    <Label Class="form-check-label">
        Large
    </Label>
</Div>

<Br />

<H2>Disabled Checkbox</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked9" Disabled="true" />
    <Label Class="form-check-label">
        Disabled checkbox
    </Label>
</Div>

<Br />

<H2>Indeterminate Checkbox</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked10" Indeterminate="true" />
    <Label Class="form-check-label">
        Indeterminate checkbox
    </Label>
</Div>

<Br />

<H2>Event Handling</H2>
<Div Class="form-check">
    <Check @bind-Checked="isChecked11" OnChange="HandleChange" />
    <Label Class="form-check-label">
        Checkbox with change event
    </Label>
</Div>
<Paragraph>Last change event: @lastChangeEvent</Paragraph>

<Br />

<H2>Validation</H2>
<Paragraph>This example requires the checkbox to be checked.</Paragraph>

<Validations @ref="validations" Model="@demoModel">
    <Validation Action="ValidateTerms">
        <Div Class="form-check">
            <Check @bind-Checked="demoModel.TermsAccepted" />
            <Label Class="form-check-label">
                I accept the terms
            </Label>
        </Div>
        <ValidationError Class="mt-2" />
    </Validation>

    <Div Class="mt-2">
        <Button Class="btn btn-primary" OnClick="Submit">Submit</Button>
        <Span Class="ms-2">@submitResult</Span>
    </Div>
</Validations>
            </Div>
        </Column>
    </Row>
</Container>

@code{
    private bool isChecked1;
    private bool isChecked2;
    private bool isChecked3;
    private bool isChecked4;
    private bool isChecked5;
    private bool isChecked6;
    private bool isChecked7;
    private bool isChecked8;
    private bool isChecked9 = true;
    private bool isChecked10;
    private bool isChecked11;
    private string lastChangeEvent = "None";

    private Validations? validations;

    private class DemoModel
    {
        public bool TermsAccepted { get; set; }
    }

    private DemoModel demoModel = new();
    private string submitResult = string.Empty;

    protected override void OnInitialized()
    {
        Logger.LogInformation("Checks demo page initialized");
    }

    private void HandleChange(ChangeEventArgs args)
    {
        lastChangeEvent = $"Value: {args.Value}, Type: {args.Value?.GetType().Name}";
    }

    private void ValidateTerms(ValidatorEventArgs args)
    {
        var isChecked = args.Value is bool b ? b : demoModel.TermsAccepted;
        if (!isChecked)
        {
            args.Status = ValidationStatus.Error;
            args.ErrorText = "You must accept the terms.";
        }
        else
        {
            args.Status = ValidationStatus.Success;
        }
    }

    private async Task Submit()
    {
        if (validations is null)
            return;

        var ok = await validations.Validate();
        submitResult = ok ? "Submitted!" : "Please fix validation errors.";
    }
}
