@page "/overlays/modals"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Enums

@inject ILogger<Index> Logger

<Container Padding="Padding.Is4.OnY">
    <Row>
        <Column>
            <Div TextAlignment="TextAlignment.Center" Margin="Margin.Is5.FromEnd">
                <H1 DisplaySize="DisplaySize.Is4" FontWeight="FontWeight.Bold" TextColor="TextColor.Primary">Modals</H1>
                <Lead TextColor="TextColor.Muted">This page demonstrates the modal component functionality.</Lead>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>Basic Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowBasicModal = true)">Show Basic Modal</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Large Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Success" OnClick="@(() => ShowLargeModal = true)">Show Large Modal</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Centered Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Info" OnClick="@(() => ShowCenteredModal = true)">Show Centered Modal</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Static Backdrop Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Warning" OnClick="@(() => ShowStaticModal = true)">Show Static Modal</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Scrollable Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowScrollableModal = true)">Show Scrollable Modal</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>New Components Modal</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@BackgroundColor.Dark" OnClick="@(() => ShowNewComponentsModal = true)">Show New Components Modal</Button>
                </Div>
            </Div>
        </Column>
    </Row>
</Container>

<!-- Basic Modal -->
<Modal @bind-Visible="ShowBasicModal" ModalSize="@ModalSizeType.Default">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is5">Basic Modal</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This is a basic modal with default settings.</Paragraph>
        <Paragraph>You can close it by clicking the X button, clicking outside the modal, or pressing the ESC key.</Paragraph>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowBasicModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowBasicModal = false)">Save changes</Button>
    </ModalFooter>
</Modal>

<!-- Large Modal -->
<Modal @bind-Visible="ShowLargeModal" ModalSize="@ModalSizeType.Large">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is4">Large Modal</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This is a large modal using the Large size variant.</Paragraph>
        <Paragraph>Large modals have more width and are useful for displaying more content.</Paragraph>
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                <H5>Column 1</H5>
                <Paragraph>Some content in the first column.</Paragraph>
            </Column>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                <H5>Column 2</H5>
                <Paragraph>Some content in the second column.</Paragraph>
            </Column>
        </Row>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowLargeModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowLargeModal = false)">Save changes</Button>
    </ModalFooter>
</Modal>

<!-- Centered Modal -->
<Modal @bind-Visible="ShowCenteredModal" ModalSize="@ModalSizeType.Default" Centered="true">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is5">Centered Modal</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This modal is vertically centered on the page.</Paragraph>
        <Paragraph>The Centered property makes the modal appear in the middle of the viewport.</Paragraph>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowCenteredModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowCenteredModal = false)">Save changes</Button>
    </ModalFooter>
</Modal>

<!-- Static Backdrop Modal -->
<Modal @bind-Visible="ShowStaticModal" ModalSize="@ModalSizeType.Default" Static="true">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is5">Static Backdrop Modal</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This modal has a static backdrop.</Paragraph>
        <Paragraph>You cannot close it by clicking outside the modal - you must use the close button or programmatically close it.</Paragraph>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowStaticModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowStaticModal = false)">Save changes</Button>
    </ModalFooter>
</Modal>

<!-- Scrollable Modal -->
<Modal @bind-Visible="ShowScrollableModal" ModalSize="@ModalSizeType.Default" Scrollable="true">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is5">Scrollable Modal</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This modal is scrollable when content overflows.</Paragraph>
        @for (var i = 1; i <= 50; i++)
        {
            <Paragraph>This is line @i of content to demonstrate scrolling.</Paragraph>
        }
        <Paragraph>You can scroll through all this content within the modal.</Paragraph>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowScrollableModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowScrollableModal = false)">Save changes</Button>
    </ModalFooter>
</Modal>

<!-- New Components Modal -->
<Modal @bind-Visible="ShowNewComponentsModal" ModalSize="@ModalSizeType.Large">
    <ModalHeader>
        <ModalTitle Scale="@Scale.Is3">New Modal Components</ModalTitle>
        <ModalCloseButton/>
    </ModalHeader>
    <ModalBody>
        <Paragraph>This modal demonstrates the new separate <Code>ModalTitle</Code> and <Code>ModalCloseButton</Code> components!</Paragraph>

        <H5>Key Features:</H5>
        <UnorderedList>
            <UnorderedListItem><Strong>ModalTitle:</Strong> Separate component with configurable heading size (Is1-Is6)</UnorderedListItem>
            <UnorderedListItem><Strong>ModalCloseButton:</Strong> Reusable close button that automatically detects parent modal</UnorderedListItem>
            <UnorderedListItem><Strong>Flexible Layout:</Strong> You can now arrange header content however you want</UnorderedListItem>
        </UnorderedList>

        <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromTop">
            <H6>Before vs After:</H6>
            <Paragraph><Strong>Old way:</Strong> ModalHeader with ModalTitle and ShowCloseButton parameters</Paragraph>
            <Paragraph><Strong>New way:</Strong> ModalHeader as container + separate ModalTitle and ModalCloseButton components</Paragraph>
        </Alert>

        <H5>Different Title Sizes:</H5>
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                <H6>Small Title (Is6):</H6>
                <ModalTitle Scale="@Scale.Is6">Small Modal Title</ModalTitle>
            </Column>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                <H6>Large Title (Is2):</H6>
                <ModalTitle Scale="@Scale.Is2">Large Modal Title</ModalTitle>
            </Column>
        </Row>
    </ModalBody>
    <ModalFooter>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Secondary" OnClick="@(() => ShowNewComponentsModal = false)">Close</Button>
        <Button Type="@ButtonType.Button" BackgroundColor="@BackgroundColor.Primary" OnClick="@(() => ShowNewComponentsModal = false)">Got it!</Button>
    </ModalFooter>
</Modal>

@code {
    private bool ShowBasicModal;
    private bool ShowLargeModal;
    private bool ShowCenteredModal;
    private bool ShowStaticModal;
    private bool ShowScrollableModal;
    private bool ShowNewComponentsModal;

    protected override void OnInitialized()
    {
        Logger.LogInformation("Modal demo page initialized");
    }

}