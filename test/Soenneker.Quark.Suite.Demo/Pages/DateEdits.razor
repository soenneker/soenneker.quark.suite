@page "/dateedits"
@using Microsoft.Extensions.Logging

@inject ILogger<Index> Logger

<Container Class="py-4">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">DateEdits</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the DateEdit component functionality.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Basic Date Input</H3>
            <DateEdit Date="@basicDate" DateChanged="@((DateTime? value) => basicDate = value)" Placeholder="Select a date" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date: @basicDate?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>

        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Date and Time Input</H3>
            <DateEdit Date="@dateTimeValue" DateChanged="@((DateTime? value) => dateTimeValue = value)" InputMode="DateInputMode.DateTime" Placeholder="Select date and time" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date/time: @dateTimeValue?.ToString("yyyy-MM-dd HH:mm")</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Month Input</H3>
            <DateEdit Date="@monthValue" DateChanged="@((DateTime? value) => monthValue = value)" InputMode="DateInputMode.Month" Placeholder="Select month" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected month: @monthValue?.ToString("yyyy-MM")</Paragraph>
        </Column>

        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Date with Min/Max</H3>
            <DateEdit Date="@restrictedDate" DateChanged="@((DateTime? value) => restrictedDate = value)" Min="@(DateTime.Today)" Max="@(DateTime.Today.AddDays(30))" Placeholder="Select date (next 30 days)" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date: @restrictedDate?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Disabled Date Input</H3>
            <DateEdit Date="@(DateTime.Today)" Disabled="true" />
            <Paragraph Margin="Margin.Is2.FromTop">This input is disabled</Paragraph>
        </Column>

        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>ReadOnly Date Input</H3>
            <DateEdit Date="@(DateTime.Today)" ReadOnly="true" />
            <Paragraph Margin="Margin.Is2.FromTop">This input is read-only</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Required Date Input</H3>
            <DateEdit Date="@requiredDate" DateChanged="@((DateTime? value) => requiredDate = value)" Required="true" Placeholder="Required field" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date: @requiredDate?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>

        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>Date with Step</H3>
            <DateEdit Date="@stepDate" DateChanged="@((DateTime? value) => stepDate = value)" Step="7" Placeholder="Weekly intervals" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date: @stepDate?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>DateOnly Input</H3>
            <DateEdit DateOnly="@dateOnlyValue" DateOnlyChanged="@((DateOnly? value) => dateOnlyValue = value)" Placeholder="Select a date (DateOnly)" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected DateOnly: @dateOnlyValue?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>

        <Column ColumnSize="@ColumnSize.Is6.OnTablet">
            <H3>DateOnly with Min/Max</H3>
            <DateEdit DateOnly="@restrictedDateOnly" 
                     DateOnlyChanged="@((DateOnly? value) => restrictedDateOnly = value)" 
                     MinDateOnly="@(DateOnly.FromDateTime(DateTime.Today))" 
                     MaxDateOnly="@(DateOnly.FromDateTime(DateTime.Today.AddDays(30)))" 
                     Placeholder="Select date (next 30 days)" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected DateOnly: @restrictedDateOnly?.ToString("yyyy-MM-dd")</Paragraph>
        </Column>
    </Row>

    <Row Margin="Margin.Is4.FromTop">
        <Column>
            <H3>Event Handling</H3>
            <DateEdit Date="@eventDate" 
                     DateChanged="@((DateTime? value) => eventDate = value)"
                     OnChange="OnDateChange" 
                     OnInput="OnDateInput" 
                     Placeholder="Watch events in console" />
            <Paragraph Margin="Margin.Is2.FromTop">Selected date: @eventDate?.ToString("yyyy-MM-dd")</Paragraph>
            <Paragraph>Last change event: @lastChangeEvent</Paragraph>
            <Paragraph>Last input event: @lastInputEvent</Paragraph>
        </Column>
    </Row>
        </Column>
    </Row>
</Container>

@code {
    private DateTime? basicDate;
    private DateTime? dateTimeValue;
    private DateTime? monthValue;
    private DateTime? restrictedDate;
    private DateTime? requiredDate;
    private DateTime? stepDate;
    private DateTime? eventDate;
    private DateOnly? dateOnlyValue;
    private DateOnly? restrictedDateOnly;
    private string lastChangeEvent = "None";
    private string lastInputEvent = "None";

    protected override void OnInitialized()
    {
        Logger.LogInformation("DateEdit demo page initialized");
    }

    private void OnDateChange(ChangeEventArgs e)
    {
        lastChangeEvent = $"Change: {e?.Value} at {DateTime.Now:HH:mm:ss}";
        Logger.LogInformation("Date change event: {Value}", e?.Value);
    }

    private void OnDateInput(ChangeEventArgs e)
    {
        lastInputEvent = $"Input: {e?.Value} at {DateTime.Now:HH:mm:ss}";
        Logger.LogInformation("Date input event: {Value}", e?.Value);
    }
}
