@page "/snackbars"

<Container Class="py-4">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">Snackbars</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the Snackbar components for displaying temporary notifications and messages.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>Basic Snackbars</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Primary" @onclick="ShowBasicSnackbar">Show Basic Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Success" @onclick="ShowSuccessSnackbar">Show Success Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Warning" @onclick="ShowWarningSnackbar">Show Warning Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Danger" @onclick="ShowErrorSnackbar">Show Error Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Basic snackbars with different color schemes and auto-dismiss functionality.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbars with Actions</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Info" @onclick="ShowActionSnackbar">Show Snackbar with Action</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Secondary" @onclick="ShowMultiActionSnackbar">Show Multi-Action Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars with action buttons for user interaction.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbars with Custom Duration</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Primary" @onclick="() => ShowCustomDurationSnackbar(1000)">Show 1 Second Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Success" @onclick="() => ShowCustomDurationSnackbar(5000)">Show 5 Second Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Warning" @onclick="() => ShowCustomDurationSnackbar(10000)">Show 10 Second Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars with custom auto-dismiss durations.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Persistent Snackbars</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Danger" @onclick="ShowPersistentSnackbar">Show Persistent Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars that don't auto-dismiss and require manual dismissal.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbars with Custom Styling</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Info" @onclick="ShowCustomStyledSnackbar">Show Custom Styled Snackbar</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Primary" @onclick="ShowGradientSnackbar">Show Gradient Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars with custom CSS styling and themes.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbar Stack</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Primary" @onclick="AddToStack">Add Multiple Snackbars to Stack</Button>
                    </Div>
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Secondary" @onclick="ClearStack">Clear All Snackbars</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Multiple snackbars stacked on top of each other.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbar Positions</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Row>
                        <Column Size="ColumnSize.Is6">
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Primary" @onclick="@(() => ShowPositionedSnackbar("top-left"))" Size="@Size.Small" Class="w-100">Top Left</Button>
                            </Div>
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Primary" @onclick="@(() => ShowPositionedSnackbar("top-center"))" Size="@Size.Small" Class="w-100">Top Center</Button>
                            </Div>
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Primary" @onclick="@(() => ShowPositionedSnackbar("top-right"))" Size="@Size.Small" Class="w-100">Top Right</Button>
                            </Div>
                        </Column>
                        <Column Size="ColumnSize.Is6">
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Success" @onclick="@(() => ShowPositionedSnackbar("bottom-left"))" Size="@Size.Small" Class="w-100">Bottom Left</Button>
                            </Div>
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Success" @onclick="@(() => ShowPositionedSnackbar("bottom-center"))" Size="@Size.Small" Class="w-100">Bottom Center</Button>
                            </Div>
                            <Div Class="mb-2">
                                <Button BackgroundColor="@Color.Success" @onclick="@(() => ShowPositionedSnackbar("bottom-right"))" Size="@Size.Small" Class="w-100">Bottom Right</Button>
                            </Div>
                        </Column>
                    </Row>
                </Div>
                <Paragraph Class="text-muted">Snackbars positioned at different locations on the screen.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbar with Rich Content</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Info" @onclick="ShowRichContentSnackbar">Show Rich Content Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars with icons, formatted text, and multiple lines.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Snackbar Component Properties</H2>
                <div class="bg-light p-3 mb-3">
                    <H3>Snackbar Features</H3>
                    <Paragraph>Snackbar components provide comprehensive notification functionality:</Paragraph>
                    <ul>
                        <li><strong>Snackbar:</strong> Main notification component</li>
                        <li><strong>SnackbarBody:</strong> Content area of the snackbar</li>
                        <li><strong>SnackbarHeader:</strong> Header section with title</li>
                        <li><strong>SnackbarFooter:</strong> Footer section with actions</li>
                        <li><strong>SnackbarAction:</strong> Action buttons within snackbars</li>
                        <li><strong>SnackbarStack:</strong> Container for multiple snackbars</li>
                        <li><strong>Auto-dismiss:</strong> Configurable auto-dismiss timing</li>
                        <li><strong>Positioning:</strong> Flexible positioning options</li>
                        <li><strong>Styling:</strong> Custom themes and colors</li>
                        <li><strong>Actions:</strong> Interactive buttons and links</li>
                    </ul>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Accessibility Features</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Div Class="mb-3">
                        <Button BackgroundColor="@Color.Primary" @onclick="ShowAccessibleSnackbar">Show Accessible Snackbar</Button>
                    </Div>
                </Div>
                <Paragraph Class="text-muted">Snackbars with proper ARIA attributes and keyboard navigation support.</Paragraph>
            </Div>
        </Column>
    </Row>
</Container>

<!-- Snackbar Stack Container -->
<SnackbarStack @ref="snackbarStackRef" />

@code {
    private SnackbarStack? snackbarStackRef;

    private async Task ShowBasicSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("This is a basic snackbar message", Color.Primary);
    }

    private async Task ShowSuccessSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Operation completed successfully!", Color.Success);
    }

    private async Task ShowWarningSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Warning: Please review your input", Color.Warning);
    }

    private async Task ShowErrorSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Error: Something went wrong", Color.Danger);
    }

    private async Task ShowActionSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("File uploaded successfully", Color.Success, options =>
            {
                options.ShowAction = true;
                options.ActionText = "View";
            });
    }

    private async Task ShowMultiActionSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Changes not saved", Color.Warning, options =>
            {
                options.ShowAction = true;
                options.ActionText = "Save";
                options.ShowClose = true;
            });
    }

    private async Task ShowCustomDurationSnackbar(int duration)
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push($"This snackbar will dismiss in {duration / 1000} seconds", Color.Info, options =>
            {
                options.HideDelay = duration;
            });
    }

    private async Task ShowPersistentSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("This snackbar requires manual dismissal", Color.Danger, options =>
            {
                options.HideDelay = null; // Never auto-hide
                options.ShowClose = true;
                options.CloseText = "Dismiss";
            });
    }

    private async Task ShowCustomStyledSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Custom styled snackbar with unique appearance", Color.Info);
    }

    private async Task ShowGradientSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Gradient styled snackbar", Color.Primary);
    }

    private async Task AddToStack()
    {
        if (snackbarStackRef != null)
        {
            await snackbarStackRef.Push("First snackbar in stack", Color.Primary);
            await Task.Delay(500);
            await snackbarStackRef.Push("Second snackbar in stack", Color.Success);
            await Task.Delay(500);
            await snackbarStackRef.Push("Third snackbar in stack", Color.Warning);
            await Task.Delay(500);
            await snackbarStackRef.Push("Fourth snackbar in stack", Color.Info);
        }
    }

    private async Task ClearStack()
    {
        // Clear functionality would need to be implemented in the SnackbarStack
        // For now, we'll just show a message
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Stack cleared", Color.Secondary);
    }

    private async Task ShowPositionedSnackbar(string position)
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push($"Snackbar positioned at {position}", Color.Primary);
    }

    private async Task ShowRichContentSnackbar()
    {
        if (snackbarStackRef != null)
        {
            var richContent = new RenderFragment(builder =>
            {
                builder.OpenElement(0, "div");
                builder.AddContent(1, "Email: ");
                builder.OpenElement(2, "strong");
                builder.AddContent(3, "New Message");
                builder.CloseElement();
                builder.AddMarkupContent(4, "<br/>");
                builder.AddContent(5, "You have received a new message from John Doe");
                builder.CloseElement();
            });

            await snackbarStackRef.Push(richContent, Color.Info, options =>
            {
                options.ShowAction = true;
                options.ActionText = "View";
            });
        }
    }

    private async Task ShowAccessibleSnackbar()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("This snackbar has proper accessibility features", Color.Primary);
    }

    // Action handlers
    private async Task HandleViewAction()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("View action clicked!", Color.Success);
    }

    private async Task HandleSaveAction()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Changes saved successfully!", Color.Success);
    }

    private async Task HandleDiscardAction()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Changes discarded", Color.Warning);
    }

    private async Task HandleDismissAction()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Snackbar dismissed", Color.Info);
    }

    private async Task HandleMarkReadAction()
    {
        if (snackbarStackRef != null)
            await snackbarStackRef.Push("Message marked as read", Color.Success);
    }

    protected override void OnInitialized()
    {
    }
}
