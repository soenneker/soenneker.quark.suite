@page "/textedits"
@using Microsoft.Extensions.Logging
@using Soenneker.Extensions.String

@inject ILogger<Index> Logger

<Div class="page-header">
    <H1>TextEdits</H1>
    <Text>This page demonstrates some of the common usages for the TextEdit component with validation support.</Text>
</Div>

<Hr />

<h2>Basic TextEdit</h2>
<Div Margin="Margin.Is3.FromBottom">
    <Label For="basicInput" Class="form-label">Basic Input (Standard binding)</Label>
    <TextEdit Id="basicInput" 
              Placeholder="Enter some text..." 
              @bind-Value="_basicValue" />
    <small class="form-text text-muted">Current value: @_basicValue</small>
</Div>

<Div Margin="Margin.Is3.FromBottom">
    <Label For="expressionInput" Class="form-label">Expression Tree Binding</Label>
    <TextEdit Id="expressionInput" 
              Placeholder="Uses expression tree..." 
              @bind-Value="_expressionValue" />
    <small class="form-text text-muted">Current value: @_expressionValue</small>
</Div>

<Hr />

<h2>TextEdit with Validation</h2>
<Validations Model="_validationModel">
    <Div Margin="Margin.Is3.FromBottom">
        <Label For="validatedInput" Class="form-label">Required Field</Label>
        <Validation Action="@ValidateRequired">
            <TextEdit Id="validatedInput" 
                      Placeholder="This field is required..." 
                      @bind-Value="_validationModel.RequiredField" />
            <ValidationError />
        </Validation>
    </Div>
    
    <Div Margin="Margin.Is3.FromBottom">
        <Label For="emailInput" Class="form-label">Email Field</Label>
        <Validation Action="@ValidateEmail">
            <TextEdit Id="emailInput" 
                      Placeholder="Enter a valid email..." 
                      @bind-Value="_validationModel.EmailField" />
            <ValidationError />
        </Validation>
    </Div>
    
    <Div Margin="Margin.Is3.FromBottom">
        <Label For="patternInput" Class="form-label">Phone Number (Pattern Validation)</Label>
        <Validation UsePattern="true" PatternString="^[\d\s\-\(\)\+]+$">
            <TextEdit Id="patternInput" 
                      Placeholder="Enter phone number..." 
                      @bind-Value="_validationModel.PhoneField" />
            <ValidationError />
        </Validation>
    </Div>
</Validations>

<Hr />

<h2>Form with Multiple Validations</h2>
<Validations @ref="_validationsRef" Model="_formModel">
    <div class="row">
        <div class="col-md-6">
            <Div Margin="Margin.Is3.FromBottom">
                <Label For="firstName" Class="form-label">First Name</Label>
                <Validation Action="@ValidateRequired">
                    <TextEdit Id="firstName" 
                              Placeholder="First name..." 
                              @bind-Value="_formModel.FirstName" />
                    <ValidationError />
                </Validation>
            </Div>
        </Div>
        <div class="col-md-6">
            <Div Margin="Margin.Is3.FromBottom">
                <Label For="lastName" Class="form-label">Last Name</Label>
                <Validation Action="@ValidateRequired">
                    <TextEdit Id="lastName" 
                              Placeholder="Last name..." 
                              @bind-Value="_formModel.LastName" />
                    <ValidationError />
                </Validation>
            </Div>
        </Div>
    </Div>
    
    <Div Margin="Margin.Is3.FromBottom">
        <Label For="company" Class="form-label">Company</Label>
        <Validation Action="@ValidateCompany">
            <TextEdit Id="company" 
                      Placeholder="Company name..." 
                      @bind-Value="_formModel.Company" />
            <ValidationError />
        </Validation>
    </Div>
    
    <button type="button" class="btn btn-primary" @onclick="ValidateAll">Validate All Fields</button>
    <button type="button" class="btn btn-secondary" @onclick="ClearAll">Clear All</button>
</Validations>

@code{
    private string _basicValue = string.Empty;
    private string _expressionValue = string.Empty;
    
    private ValidationModel _validationModel = new();
    private FormModel _formModel = new();
    
    private Validations? _validationsRef;

    protected override void OnInitialized()
    {
    }
    
    private void ValidateRequired(ValidatorEventArgs e)
    {
        if (e.Value.ToString().IsNullOrWhiteSpace() == true)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "This field is required.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
    
    private void ValidateEmail(ValidatorEventArgs e)
    {
        var email = e.Value.ToString();

        if (email.IsNullOrWhiteSpace())
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Email is required.";
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please enter a valid email address.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
    
    private void ValidateCompany(ValidatorEventArgs e)
    {
        var company = e.Value?.ToString();
        if (company.IsNullOrWhiteSpace())
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Company name is required.";
        }
        else if (company.Length < 2)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Company name must be at least 2 characters.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
    
    private async Task ValidateAll()
    {
        if (_validationsRef is not null)
        {
            await _validationsRef.Validate();
        }
    }
    
    private async Task ClearAll()
    {
        if (_validationsRef is not null)
        {
            await _validationsRef.ClearAll();
        }
        
        _formModel = new FormModel();
        await InvokeAsync(StateHasChanged);
    }
    
    public class ValidationModel
    {
        public string RequiredField { get; set; } = string.Empty;
        public string EmailField { get; set; } = string.Empty;
        public string PhoneField { get; set; } = string.Empty;
    }
    
    public class FormModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Company { get; set; } = string.Empty;
    }
}
