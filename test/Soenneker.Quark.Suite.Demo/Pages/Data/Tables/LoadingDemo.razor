@page "/data/tables/loading-demo"
@using Microsoft.Extensions.Logging
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Quark.Suite.Demo.Services
@using Soenneker.Quark.Suite.Demo.Dtos
@using Soenneker.Utils.Delay

@inject ILogger<LoadingDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>Loading Demo - Table</PageTitle>

<Div class="demo-hero">
    <Div class="container">
        <Div class="row">
            <Div class="col-12 text-center">
                <Div class="hero-content">
                    <Div class="demo-icon">⚡</Div>
                    <H1 Class="demo-title">Loading Behavior Demo</H1>
                    <Paragraph Class="demo-subtitle">Smooth loading behavior with overlay that prevents jarring flickering effects.</Paragraph>
                </Div>
            </Div>
        </Div>
    </Div>
</Div>

<Div class="container">
    <Div class="demo-card">
        <Div class="card-header">
            <Div class="card-header-content">
                <H3><Icon Name="spinner" Margin="Margin.Is2.FromEnd"/>Employee Directory</H3>
                <Paragraph TextColor="TextColor.Muted" Margin="Margin.Is0.FromBottom">Try searching, sorting, or changing pages to see the smooth loading overlay</Paragraph>
            </Div>
        </Div>
        <Div class="card-body">
            <Table @ref="_tableRef"
                        TotalRecords="@_totalRecords"
                        OnInteraction="HandleServerSideRequest" >

                <TableSearch Placeholder="Search employees..." />

                <TableLoader>
                </TableLoader>

                <TableElement>
                    <Thead>
                        <Tr>
                            <Th Sortable="true" Searchable="true" >Name</Th>
                            <Th Sortable="true" Searchable="true" >Department</Th>
                            <Th Sortable="true" Searchable="true" >Email</Th>
                            <Th Sortable="true" Searchable="true" >Salary</Th>
                            <Th Sortable="true" Searchable="true" >Hire Date</Th>
                            <Th Sortable="true" Searchable="true" >Status</Th>
                        </Tr>
                    </Thead>

                    <Tbody>
                        @if (_currentEmployees is {Count: > 0})
                        {
                            @foreach (var employee in _currentEmployees)
                            {
                                <Tr Key="@employee.Id" >
                                    <Td>@employee.Name</Td>
                                    <Td>@employee.Department</Td>
                                    <Td>@employee.Email</Td>
                                    <Td>@employee.Salary.ToString("C")</Td>
                                    <Td>@employee.HireDate.ToString("MMM dd, yyyy")</Td>
                                    <Td>@employee.Status</Td>
                                </Tr>
                            }
                        }
                        else if (_tableRef.HasLoadedOnce)
                        {
                            <TableNoData>
                                <Div class="no-data-content">
                                    <Div class="no-data-icon">⚡</Div>
                                    <h4>No employees found</h4>
                                    <Paragraph>Try adjusting your search criteria or filters.</Paragraph>
                                </Div>
                            </TableNoData>
                        }
                    </Tbody>
                </TableElement>

                <TableBottomBar>
                    <TableInfo />
                    <TablePagination />
                </TableBottomBar>
            </Table>
        </Div>
    </Div>
</Div>

@code {
    private Table? _tableRef;
    private List<Employee> _currentEmployees = [];
    private int _totalRecords;

    private async Task HandleServerSideRequest(DataTableServerSideRequest request)
    {
        Logger.LogInformation("LoadingDemo: HandleServerSideRequest called: Start={Start}, Length={Length}", request.Start, request.Length);

        try
        {
            // Get filtered employees using the service
            var employees = await EmployeeService.GetFilteredEmployees(request);

            await DelayUtil.Delay(3000, Logger);

            Logger.LogInformation("LoadingDemo: EmployeeService returned {Count} employees", employees.Count);

            // Update the current employees list
            _currentEmployees = employees;

            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("LoadingDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", _currentEmployees.Count, _totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "LoadingDemo: Error handling server-side request: {Message}", ex.Message);
        }
    }

}
