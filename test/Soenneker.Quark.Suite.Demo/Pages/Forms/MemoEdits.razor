@page "/forms/memoedits"
@using Microsoft.Extensions.Logging
@using Soenneker.Extensions.String

@inject ILogger<Index> Logger

<Container Padding="Padding.Is4.OnY">
<Row>
    <Column>
        <Div TextAlignment="TextAlignment.Center" Margin="Margin.Is5.FromEnd">
            <H1 DisplaySize="DisplaySize.Is4" FontWeight="FontWeight.Bold" TextColor="TextColor.Primary">MemoEdits</H1>
            <Paragraph Class="lead" TextColor="TextColor.Muted">This page demonstrates the MemoEdit component - a multi-line text input control with various customization options.</Paragraph>
        </Div>
    </Column>
</Row>

<Row Gap="Gap.Is4">
    <Column>
        <Div>
            <H2>ðŸ§ª BINDING TEST SECTION</H2>
                <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromEnd">
                <Strong>Test Instructions:</Strong> Type in the fields below or click "Load Test Data" to verify binding works.
            </Alert>

            <Div Margin="Margin.Is4.FromBottom" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Light" BorderRadius="BorderRadius.Is">
                <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testMemo1" Form="true" FontWeight="FontWeight.Bold">Test Memo 1:</Label>
                    <MemoEdit Id="testMemo1"
                              Placeholder="Type something here..."
                              @bind-Value="_testMemo1"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" BorderRadius="BorderRadius.Is">
                        <Strong>Bound Value:</Strong> <Code>@(_testMemo1 ?? "(empty)")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testMemo2" Form="true" FontWeight="FontWeight.Bold">Test Memo 2 (Pre-populated):</Label>
                    <MemoEdit Id="testMemo2"
                              Placeholder="Type something here..."
                              @bind-Value="_testMemo2"
                              Rows="5"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" BorderRadius="BorderRadius.Is">
                        <Strong>Bound Value:</Strong> <Code>@(_testMemo2 ?? "(empty)")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromTop">
                    <Button BackgroundColor="BackgroundColor.Primary" OnClick="LoadMemoTestData" Margin="Margin.Is2.FromEnd">Load Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearMemoTestData" Margin="Margin.Is2.FromEnd">Clear Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Warning" OnClick="UpdateMemoTestData">Update to Random Values</Button>
                </Div>

                <Div Margin="Margin.Is3.FromTop" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Success" Class="bg-opacity-10 rounded">
                    <H4>Test Results:</H4>
                    <UnorderedList Margin="Margin.Is0.FromBottom">
                        <UnorderedListItem>
                            <Strong>Memo 1:</Strong> @(_testMemo1 ?? "(not set)")
                        </UnorderedListItem>
                        <UnorderedListItem>
                            <Strong>Memo 2:</Strong> @(_testMemo2 ?? "(not set)")
                        </UnorderedListItem>
                    </UnorderedList>
                </Div>
            </Div>

            <Hr/>

            <H2>Basic Usage</H2>
            <H3>Default MemoEdit</H3>
            <MemoEdit @bind-Value="basicValue" Placeholder="Enter your text here..."/>
            <Paragraph>
                <Strong>Value:</Strong> @basicValue
            </Paragraph>
        </Div>

        <Div Class="demo-section">
            <H2>Size Variations</H2>
            <H3>Small Size</H3>
            <MemoEdit @bind-Value="smallValue" Size="Size.Small" Placeholder="Small memo edit..."/>

            <H3>Large Size</H3>
            <MemoEdit @bind-Value="largeValue" Size="Size.Large" Placeholder="Large memo edit..."/>
        </Div>

        <Div Class="demo-section">
            <H2>Color Variations</H2>
            <H3>Primary Color</H3>
            <MemoEdit @bind-Value="primaryValue" Color="Color.Primary" Placeholder="Primary color memo..."/>

            <H3>Success Color</H3>
            <MemoEdit @bind-Value="successValue" Color="Color.Success" Placeholder="Success color memo..."/>

            <H3>Warning Color</H3>
            <MemoEdit @bind-Value="warningValue" Color="Color.Warning" Placeholder="Warning color memo..."/>

            <H3>Danger Color</H3>
            <MemoEdit @bind-Value="dangerValue" Color="Color.Danger" Placeholder="Danger color memo..."/>
        </Div>

        <Div Class="demo-section">
            <H2>Row Configuration</H2>
            <H3>2 Rows</H3>
            <MemoEdit @bind-Value="rows2Value" Rows="2" Placeholder="2 rows memo..."/>

            <H3>5 Rows</H3>
            <MemoEdit @bind-Value="rows5Value" Rows="5" Placeholder="5 rows memo..."/>

            <H3>8 Rows</H3>
            <MemoEdit @bind-Value="rows8Value" Rows="8" Placeholder="8 rows memo..."/>
        </Div>

        <Div Class="demo-section">
            <H2>Auto Resize</H2>
            <MemoEdit @bind-Value="autoResizeValue" AutoResize="true" Placeholder="This memo edit will resize as you type..."/>
        </Div>

        <Div Class="demo-section">
            <H2>Validation Features</H2>
            <H3>Required Field</H3>
            <MemoEdit @bind-Value="requiredValue" Required="true" Placeholder="This field is required..."/>

            <H3>Max Length (100 characters)</H3>
            <MemoEdit @bind-Value="maxLengthValue" MaxLength="100" Placeholder="Maximum 100 characters allowed..."/>
            <Paragraph>
                <Small>Characters: @(maxLengthValue?.Length ?? 0)/100</Small>
            </Paragraph>

            <H3>Min Length (10 characters)</H3>
            <MemoEdit @bind-Value="minLengthValue" MinLength="10" Placeholder="Minimum 10 characters required..."/>
        </Div>

        <Div Class="demo-section">
            <H2>State Variations</H2>
            <H3>Disabled</H3>
            <MemoEdit @bind-Value="disabledValue" Disabled="true" Placeholder="This memo edit is disabled..."/>

            <H3>Read Only</H3>
            <MemoEdit @bind-Value="readOnlyValue" ReadOnly="true" Placeholder="This memo edit is read only..."/>
        </Div>

        <Div Class="demo-section">
            <H2>Event Handling</H2>
            <H3>With Change Event</H3>
            <MemoEdit @bind-Value="changeValue" OnChange="OnChangeHandler" Placeholder="Type to see change events..."/>
            <Paragraph>
                <Strong>Last Change:</Strong> @lastChangeTime
            </Paragraph>

            <H3>With Input Event</H3>
            <MemoEdit @bind-Value="inputValue" OnInput="OnInputHandler" Placeholder="Type to see input events..."/>
            <Paragraph>
                <Strong>Last Input:</Strong> @lastInputTime
            </Paragraph>
        </Div>

        <Div Class="demo-section">
            <H2>Form Integration Example</H2>
            <Div Class="form-example">
                <H3>Contact Form</H3>
                <Div Class="form-group">
                    <label>Message:</Label>
                    <MemoEdit @bind-Value="contactMessage"
                              Rows="4"
                              Required="true"
                              MaxLength="500"
                              Color="Color.Primary"
                              Placeholder="Enter your message here..."/>
                </Div>
                <Div Class="form-group">
                    <label>Additional Notes:</Label>
                    <MemoEdit @bind-Value="additionalNotes"
                              Rows="3"
                              AutoResize="true"
                              Color="@Color.Secondary"
                              Placeholder="Any additional notes..."/>
                </Div>
                <Button Class="btn btn-primary" OnClick="SubmitForm">
                    Submit
                </Button>
                <Paragraph>
                    <Strong>Form Status:</Strong> <span class="@GetStatusClass()">@formStatus</span>
                </Paragraph>
            </Div>
        </Div>

        <Div Class="demo-section">
            <H2>Character Counter</H2>
            <MemoEdit @bind-Value="counterValue"
                      MaxLength="200"
                      OnInput="OnCounterInput"
                      Placeholder="Type to see character counter..."/>
            <Div Class="@($"char-counter {GetCounterClass()}")">
                @(counterValue?.Length ?? 0)/200
            </Div>
        </Div>

        <Div Class="demo-section">
            <H2>Pre-filled Content</H2>
            <MemoEdit @bind-Value="prefilledValue"
                      Rows="6"
                      Color="Color.Info"
                      Placeholder="This has pre-filled content..."/>
            <Button Class="btn btn-primary" OnClick="LoadSampleContent" Style="margin-top: 10px;">
                Load Sample Content
            </Button>
        </Div>
    </Column>
</Row>
</Container>

@code {

    // Binding Test Fields
    private string? _testMemo1;
    private string? _testMemo2 = "Initial text for Memo 2\nThis has multiple lines\nTo test binding better";

    private string? basicValue;
    private string? smallValue;
    private string? largeValue;
    private string? primaryValue;
    private string? successValue;
    private string? warningValue;
    private string? dangerValue;
    private string? rows2Value;
    private string? rows5Value;
    private string? rows8Value;
    private string? autoResizeValue;
    private string? requiredValue;
    private string? maxLengthValue;
    private string? minLengthValue;
    private string? patternValue;
    private string? disabledValue = "This is disabled content";
    private string? readOnlyValue = "This is read-only content";
    private string? changeValue;
    private string? inputValue;
    private string? contactMessage;
    private string? additionalNotes;
    private string? counterValue;
    private string? prefilledValue = "This is some pre-filled content that demonstrates how the MemoEdit component can display existing text.";
    private string? formStatus = "Ready to submit";

    private DateTime lastChangeTime;
    private DateTime lastInputTime;

    protected override void OnInitialized()
    {
        Logger.LogInformation("MemoEdits demo page initialized");
    }

    private void LoadMemoTestData()
    {
        _testMemo1 = "Test Data 1 - Loaded\nThis is a multi-line\ntest value";
        _testMemo2 = "Test Data 2 - Loaded\nWith even more lines\nTo verify binding\nWorks correctly";
        Logger.LogInformation("Memo test data loaded");
    }

    private void ClearMemoTestData()
    {
        _testMemo1 = null;
        _testMemo2 = null;
        Logger.LogInformation("Memo test data cleared");
    }

    private void UpdateMemoTestData()
    {
        _testMemo1 = $"Random-{Guid.NewGuid().ToString()[..8]}\nUpdated at {DateTime.Now:HH:mm:ss}";
        _testMemo2 = $"Random-{Guid.NewGuid().ToString()[..8]}\nMulti-line content\nUpdated at {DateTime.Now:HH:mm:ss}";
        Logger.LogInformation("Memo test data updated with random values");
    }

    private void OnChangeHandler(ChangeEventArgs e)
    {
        lastChangeTime = DateTime.Now;
        Logger.LogInformation("MemoEdit change event fired at {Time}", lastChangeTime);
    }

    private void OnInputHandler(ChangeEventArgs e)
    {
        lastInputTime = DateTime.Now;
        Logger.LogInformation("MemoEdit input event fired at {Time}", lastInputTime);
    }

    private void OnCounterInput(ChangeEventArgs e)
    {
        // This could be used for real-time validation or UI updates
        StateHasChanged();
    }

    private void SubmitForm()
    {
        if (contactMessage.IsNullOrWhiteSpace())
        {
            formStatus = "Message is required!";
            return;
        }

        if (contactMessage.Length < 10)
        {
            formStatus = "Message must be at least 10 characters long!";
            return;
        }

        formStatus = $"Form submitted successfully at {DateTime.Now:HH:mm:ss}! Message: {contactMessage.Substring(0, Math.Min(50, contactMessage.Length))}...";

        // Reset form
        contactMessage = string.Empty;
        additionalNotes = string.Empty;
    }

    private void LoadSampleContent()
    {
        prefilledValue = @"This is a sample of longer content that demonstrates how the MemoEdit component handles multi-line text.

It includes:
- Multiple paragraphs
- Line breaks
- Various text formatting

The component automatically handles:
â€¢ Resizing
â€¢ Scrolling when needed
â€¢ Proper text wrapping

You can edit this content to see how the component behaves with different amounts of text.";
    }

    private string GetStatusClass()
    {
        return formStatus switch
        {
            "Ready to submit" => "status-ready",
            var status when status.Contains("error", StringComparison.OrdinalIgnoreCase) => "status-error",
            var status when status.Contains("success", StringComparison.OrdinalIgnoreCase) => "status-success",
            _ => "status-ready"
        };
    }

    private string GetCounterClass()
    {
        var length = counterValue?.Length ?? 0;
        return length switch
        {
            var l when l > 180 => "danger",
            var l when l > 160 => "warning",
            _ => ""
        };
    }

}