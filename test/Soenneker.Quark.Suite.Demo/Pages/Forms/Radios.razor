@page "/forms/radios"
@using Microsoft.Extensions.Logging

@inject ILogger<Index> Logger

<Container Padding="Padding.Is4.OnY">
    <Row>
        <Column>
            <Div TextAlignment="TextAlignment.Center" Margin="Margin.Is5.FromEnd">
                <H1 DisplaySize="DisplaySize.Is4" FontWeight="FontWeight.Bold" TextColor="TextColor.Primary">Radios</H1>
                <Paragraph Class="lead" TextColor="TextColor.Muted">Comprehensive examples with forms and various states</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row>
        <Column>
            <H2>ðŸ§ª BINDING TEST SECTION</H2>
            <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromEnd">
                <Strong>Test Instructions:</Strong> Select radio buttons below or click "Load Test Data" to verify binding works.
            </Alert>

            <Div Margin="Margin.Is4.FromBottom" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Light" BorderRadius="BorderRadius.Default">
                <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>
                
                <Div Margin="Margin.Is3.FromBottom">
                    <Label Form="true" FontWeight="FontWeight.Bold">Test Radio Group 1:</Label>
                    <Radio Name="testGroup1" Value="test1" Checked="@(_testRadio1 == "test1")" CheckedChanged="@((bool c) => { if (c) _testRadio1 = "test1"; })">
                        Test Option 1
                    </Radio>
                    <Radio Name="testGroup1" Value="test2" Checked="@(_testRadio1 == "test2")" CheckedChanged="@((bool c) => { if (c) _testRadio1 = "test2"; })">
                        Test Option 2
                    </Radio>
                    <Radio Name="testGroup1" Value="test3" Checked="@(_testRadio1 == "test3")" CheckedChanged="@((bool c) => { if (c) _testRadio1 = "test3"; })">
                        Test Option 3 (Pre-selected)
                    </Radio>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" BorderRadius="BorderRadius.Default">
                        <Strong>Bound Value:</Strong> <Code>@(_testRadio1 ?? "(none)")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromTop">
                    <Button BackgroundColor="BackgroundColor.Primary" OnClick="LoadRadioTestData" Margin="Margin.Is2.FromEnd">Load Test Data (Select Option 2)</Button>
                    <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearRadioTestData" Margin="Margin.Is2.FromEnd">Clear Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Warning" OnClick="UpdateRadioTestData">Select Random Option</Button>
                </Div>
                
                <Div Margin="Margin.Is3.FromTop" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Success" Class="bg-opacity-10 rounded">
                    <H4>Test Results:</H4>
                    <UnorderedList Margin="Margin.Is0.FromBottom">
                        <UnorderedListItem><Strong>Radio Group 1:</Strong> @(_testRadio1 ?? "(not set)")</UnorderedListItem>
                    </UnorderedList>
                </Div>
            </Div>

            <Hr />
        </Column>
    </Row>

    <Row>
        <!-- Basic Usage -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Basic Usage</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Simple radio button group with ChildContent support</Paragraph>

                    <CodeEditor ReadOnly="true" 
                                Language="@("html")" 
                                AutoHeight="true" Margin="Margin.Is3.FromBottom"
                                Text="@(@"<Radio Name=""basicGroup"" Value=""Option1"" 
       Checked=""@(_selected == \""Option1\"")"" 
       OnClick=""@(() => _selected = \""Option1\"")"">
    Option 1
</Radio>
<Radio Name=""basicGroup"" Value=""Option2"" 
       Checked=""@(_selected == \""Option2\"")"" 
       OnClick=""@(() => _selected = \""Option2\"")"">
    Option 2
</Radio>")" />

                    <Radio Name="basicGroup" Value="Option1" Checked="@(_basicSelected == "Option1")" OnClick="@(() => SelectBasic("Option1"))">
                        Option 1
                    </Radio>
                    <Radio Name="basicGroup" Value="Option2" Checked="@(_basicSelected == "Option2")" OnClick="@(() => SelectBasic("Option2"))">
                        Option 2
                    </Radio>
                    <Radio Name="basicGroup" Value="Option3" Checked="@(_basicSelected == "Option3")" OnClick="@(() => SelectBasic("Option3"))">
                        Option 3
                    </Radio>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Selected: <Strong>@_basicSelected</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>

        <!-- Disabled States -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Disabled States</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Examples of disabled radio buttons</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Notification Preferences</Label>
                        <Radio Name="notifications" Value="Email" Checked="@(_notificationPreference == "Email")"
                               OnClick="@(() => _notificationPreference = "Email")">
                            Email
                        </Radio>
                        <Radio Name="notifications" Value="SMS" Checked="@(_notificationPreference == "SMS")"
                               OnClick="@(() => _notificationPreference = "SMS")">
                            SMS
                        </Radio>
                        <Radio Name="notifications" Value="Push" Checked="@(_notificationPreference == "Push")"
                               OnClick="@(() => _notificationPreference = "Push")" Disabled="true">
                            Push (Coming Soon)
                        </Radio>
                        <Radio Name="notifications" Value="None" Checked="@(_notificationPreference == "None")"
                               OnClick="@(() => _notificationPreference = "None")" Disabled="true">
                            None (Disabled)
                        </Radio>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Selected: <Strong>@_notificationPreference</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <!-- Inline Radios -->
        <Column Margin="Margin.Is4.FromBottom">
            <Card>
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Inline Radios (New)</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Radio buttons displayed inline using ChildContent</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">How would you rate your experience?</Label>
                        <Div>
                            <Radio Name="ratingGroup" Value="Excellent" Checked="@(_ratingSelected == "Excellent")" 
                                   OnClick="@(() => _ratingSelected = "Excellent")" Inline="true">
                                Excellent
                            </Radio>
                            <Radio Name="ratingGroup" Value="Good" Checked="@(_ratingSelected == "Good")" 
                                   OnClick="@(() => _ratingSelected = "Good")" Inline="true">
                                Good
                            </Radio>
                            <Radio Name="ratingGroup" Value="Fair" Checked="@(_ratingSelected == "Fair")" 
                                   OnClick="@(() => _ratingSelected = "Fair")" Inline="true">
                                Fair
                            </Radio>
                            <Radio Name="ratingGroup" Value="Poor" Checked="@(_ratingSelected == "Poor")" 
                                   OnClick="@(() => _ratingSelected = "Poor")" Inline="true">
                                Poor
                            </Radio>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Selected Rating: <Strong>@_ratingSelected</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <!-- Event Handling Examples -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Event Handling</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Radio buttons with different event handling patterns</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Event Logging</Label>
                        <Div Class="form-check">
                            <Radio Name="eventGroup" Value="Click" Checked="@(_eventSelected == "Click")" 
                                   OnClick="@(() => HandleRadioClick("Click"))"/>
                            <Label Class="form-check-label">Click Event</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="eventGroup" Value="Change" Checked="@(_eventSelected == "Change")" 
                                   OnChange="@((e) => HandleRadioChange(e, "Change"))"/>
                            <Label Class="form-check-label">Change Event</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="eventGroup" Value="Focus" Checked="@(_eventSelected == "Focus")" 
                                   OnFocus="@(() => HandleRadioFocus("Focus"))"/>
                            <Label Class="form-check-label">Focus Event</Label>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Last Event: <Strong>@_lastEvent</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>

        <!-- Color Variants -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Color Variants</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Radio buttons with different colors</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Theme Selection</Label>
                        <Div Class="form-check">
                            <Radio Name="themeGroup" Value="Primary" Checked="@(_themeSelected == "Primary")" 
                                   BackgroundColor="BackgroundColor.Primary" OnClick="@(() => SelectTheme("Primary"))"/>
                            <Label Class="form-check-label">Primary Theme</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="themeGroup" Value="Success" Checked="@(_themeSelected == "Success")" 
                                   BackgroundColor="BackgroundColor.Success" OnClick="@(() => SelectTheme("Success"))"/>
                            <Label Class="form-check-label">Success Theme</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="themeGroup" Value="Warning" Checked="@(_themeSelected == "Warning")" 
                                   BackgroundColor="BackgroundColor.Warning" OnClick="@(() => SelectTheme("Warning"))"/>
                            <Label Class="form-check-label">Warning Theme</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="themeGroup" Value="Danger" Checked="@(_themeSelected == "Danger")" 
                                   BackgroundColor="BackgroundColor.Danger" OnClick="@(() => SelectTheme("Danger"))"/>
                            <Label Class="form-check-label">Danger Theme</Label>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Selected Theme: <Strong>@_themeSelected</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <!-- Size Variants -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Size Variants</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Radio buttons with different sizes</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Size Preference</Label>
                        <Radio Name="sizeGroup" Value="ExtraSmall" Checked="@(_sizeSelected == "ExtraSmall")" 
                               Size="Size.ExtraSmall" OnClick="@(() => SelectSize("ExtraSmall"))">
                            Extra Small Size
                        </Radio>
                        <Radio Name="sizeGroup" Value="Small" Checked="@(_sizeSelected == "Small")" 
                               Size="Size.Small" OnClick="@(() => SelectSize("Small"))">
                            Small Size
                        </Radio>
                        <Radio Name="sizeGroup" Value="Medium" Checked="@(_sizeSelected == "Medium")" 
                               Size="Size.Medium" OnClick="@(() => SelectSize("Medium"))">
                            Medium Size (Default)
                        </Radio>
                        <Radio Name="sizeGroup" Value="Large" Checked="@(_sizeSelected == "Large")" 
                               Size="Size.Large" OnClick="@(() => SelectSize("Large"))">
                            Large Size
                        </Radio>
                        <Radio Name="sizeGroup" Value="ExtraLarge" Checked="@(_sizeSelected == "ExtraLarge")" 
                               Size="Size.ExtraLarge" OnClick="@(() => SelectSize("ExtraLarge"))">
                            Extra Large Size
                        </Radio>
                        <Radio Name="sizeGroup" Value="ExtraExtraLarge" Checked="@(_sizeSelected == "ExtraExtraLarge")" 
                               Size="Size.ExtraExtraLarge" OnClick="@(() => SelectSize("ExtraExtraLarge"))">
                            Extra Extra Large Size
                        </Radio>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Selected Size: <Strong>@_sizeSelected</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>

        <!-- Form Integration -->
        <Column ColumnSize="@ColumnSize.Is6.OnLaptop" Margin="Margin.Is4.FromBottom">
            <Card Class="h-100">
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Form Integration</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Radio buttons integrated with form validation</Paragraph>

                    <Validations @ref="validations" Model="@formModel">
                        <Validation Action="ValidatePaymentMethod">
                            <Div Margin="Margin.Is3.FromBottom">
                                <Label Form="true">Payment Method</Label>
                                <Radio Name="paymentGroup" Value="CreditCard" Checked="@(formModel.PaymentMethod == "CreditCard")" 
                                       OnChange="@((e) => formModel.PaymentMethod = "CreditCard")">
                                    Credit Card
                                </Radio>
                                <Radio Name="paymentGroup" Value="PayPal" Checked="@(formModel.PaymentMethod == "PayPal")" 
                                       OnChange="@((e) => formModel.PaymentMethod = "PayPal")">
                                    PayPal
                                </Radio>
                                <Radio Name="paymentGroup" Value="BankTransfer" Checked="@(formModel.PaymentMethod == "BankTransfer")" 
                                       OnChange="@((e) => formModel.PaymentMethod = "BankTransfer")">
                                    Bank Transfer
                                </Radio>
                            </Div>
                            <ValidationError Margin="Margin.Is2.FromTop" />
                        </Validation>

                        <Div Margin="Margin.Is3.FromTop">
                            <Button BackgroundColor="BackgroundColor.Primary" OnClick="SubmitForm">Submit Form</Button>
                            <Span Margin="Margin.Is2.FromStart">@submitResult</Span>
                        </Div>
                    </Validations>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <!-- Interactive Demo -->
        <Column>
            <Card>
                <CardHeader>
                    <H5 Class="card-title" Margin="Margin.Is0">Interactive Demo</H5>
                </CardHeader>
                <CardBody>
                    <Paragraph TextColor="TextColor.Muted">Master radio button that controls all others</Paragraph>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Master Control</Label>
                        <Div Class="form-check">
                            <Radio Name="masterGroup" Value="All" Checked="@_masterSelected" 
                                   OnClick="@(() => ToggleMaster())"/>
                            <Label Class="form-check-label">Select All Options</Label>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label Form="true">Controlled Options</Label>
                        <Div Class="form-check">
                            <Radio Name="controlledGroup" Value="Option1" Checked="@_masterSelected" 
                                   Disabled="@(!_masterSelected)" />
                            <Label Class="form-check-label">Option 1</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="controlledGroup" Value="Option2" Checked="@_masterSelected" 
                                   Disabled="@(!_masterSelected)" />
                            <Label Class="form-check-label">Option 2</Label>
                        </Div>
                        <Div Class="form-check">
                            <Radio Name="controlledGroup" Value="Option3" Checked="@_masterSelected" 
                                   Disabled="@(!_masterSelected)" />
                            <Label Class="form-check-label">Option 3</Label>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Small TextColor="TextColor.Muted">Master Status: <Strong>@(_masterSelected ? "Enabled" : "Disabled")</Strong></Small>
                    </Div>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {
    // Binding Test Fields
    private string? _testRadio1 = "test3";

    // Basic usage
    private string _basicSelected = "Option1";

    // Disabled states
    private string _notificationPreference = "Email";

    // Event handling
    private string _eventSelected = "Click";
    private string _lastEvent = "None";

    // Color variants
    private string _themeSelected = "Primary";

    // Size variants
    private string _sizeSelected = "Default";

    // Form integration
    private Validations? validations;
    private FormModel formModel = new();
    private string submitResult = string.Empty;

    // Interactive demo
    private bool _masterSelected = false;

    // Inline radios
    private string _ratingSelected = "Good";

    protected override void OnInitialized()
    {
        Logger.LogInformation("Radios demo page initialized");
    }

    private void LoadRadioTestData()
    {
        _testRadio1 = "test2";
        Logger.LogInformation("Radio test data loaded - test2 selected");
    }
    
    private void ClearRadioTestData()
    {
        _testRadio1 = null;
        Logger.LogInformation("Radio test data cleared");
    }
    
    private void UpdateRadioTestData()
    {
        var options = new[] { "test1", "test2", "test3" };
        _testRadio1 = options[new Random().Next(options.Length)];
        Logger.LogInformation("Radio test data updated to {Value}", _testRadio1);
    }

    private void SelectBasic(string option)
    {
        _basicSelected = option;
        StateHasChanged();
    }

    private void HandleRadioClick(string value)
    {
        _eventSelected = value;
        _lastEvent = $"Click: {value} at {DateTime.Now:HH:mm:ss}";
        StateHasChanged();
    }

    private void HandleRadioChange(ChangeEventArgs e, string value)
    {
        _eventSelected = value;
        _lastEvent = $"Change: {value} at {DateTime.Now:HH:mm:ss}";
        StateHasChanged();
    }

    private void HandleRadioFocus(string value)
    {
        _eventSelected = value;
        _lastEvent = $"Focus: {value} at {DateTime.Now:HH:mm:ss}";
        StateHasChanged();
    }

    private void SelectTheme(string theme)
    {
        _themeSelected = theme;
        StateHasChanged();
    }

    private void SelectSize(string size)
    {
        _sizeSelected = size;
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        if (validations is null)
            return;

        var ok = await validations.Validate();
        submitResult = ok ? "Form submitted successfully!" : "Please fix validation errors.";
        StateHasChanged();
    }

    private void ToggleMaster()
    {
        _masterSelected = !_masterSelected;
        StateHasChanged();
    }

    private void ValidatePaymentMethod(ValidatorEventArgs args)
    {
        var paymentMethod = args.Value?.ToString();
        if (string.IsNullOrEmpty(paymentMethod))
        {
            args.Status = ValidationStatus.Error;
            args.ErrorText = "Please select a payment method.";
        }
        else
        {
            args.Status = ValidationStatus.Success;
        }
    }

    public class FormModel
    {
        public string PaymentMethod { get; set; } = string.Empty;
    }
}
