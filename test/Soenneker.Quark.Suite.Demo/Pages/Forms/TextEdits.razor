@page "/forms/textedits"
@using Microsoft.Extensions.Logging
@using Soenneker.Extensions.String

@inject ILogger<Index> Logger

<Container Padding="Padding.Is4.OnY">
    <Row>
        <Column>
            <Div TextAlignment="TextAlignment.Center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4" FontWeight="FontWeight.Bold" TextColor="TextColor.Primary">TextEdits</H1>
                <Paragraph Class="lead" TextColor="TextColor.Muted">This page demonstrates some of the common usages for the TextEdit component with validation support.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>ðŸ§ª BINDING TEST SECTION</H2>
                <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromBottom">
                    <Strong>Test Instructions:</Strong> Type in the fields below or click "Load Test Data" to verify binding works.
                </Alert>

                <Div Margin="Margin.Is4.FromBottom" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Light" Class="rounded">
                    <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="testInput1" Class="form-label" FontWeight="FontWeight.Bold">Test Field 1:</Label>
                        <TextEdit Id="testInput1"
                                  Placeholder="Type something here..."
                                  @bind-Text="_testField1"/>
                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" Class="rounded">
                            <Strong>Bound Value:</Strong> <Code>@(_testField1 ?? "(empty)")</Code>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="testInput2" Class="form-label" FontWeight="FontWeight.Bold">Test Field 2:</Label>
                        <TextEdit Id="testInput2"
                                  Placeholder="Type something here..."
                                  @bind-Text="_testField2"/>
                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" Class="rounded">
                            <Strong>Bound Value:</Strong> <Code>@(_testField2 ?? "(empty)")</Code>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="testInput3" Class="form-label" FontWeight="FontWeight.Bold">Test Field 3 (Pre-populated):</Label>
                        <TextEdit Id="testInput3"
                                  Placeholder="This should show pre-populated value..."
                                  @bind-Text="_testField3"/>
                        <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" Class="rounded">
                            <Strong>Bound Value:</Strong> <Code>@(_testField3 ?? "(empty)")</Code>
                        </Div>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop">
                        <Button BackgroundColor="BackgroundColor.Primary" OnClick="LoadTestData" Margin="Margin.Is2.FromEnd">Load Test Data</Button>
                        <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearTestData" Margin="Margin.Is2.FromEnd">Clear Test Data</Button>
                        <Button BackgroundColor="BackgroundColor.Warning" OnClick="UpdateTestData">Update to Random Values</Button>
                    </Div>

                    <Div Margin="Margin.Is3.FromTop" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Success" Class="bg-opacity-10 rounded">
                        <H4>Test Results:</H4>
                        <UnorderedList Margin="Margin.Is0.FromBottom">
                            <UnorderedListItem>
                                <Strong>Field 1:</Strong> @(_testField1 ?? "(not set)")
                            </UnorderedListItem>
                            <UnorderedListItem>
                                <Strong>Field 2:</Strong> @(_testField2 ?? "(not set)")
                            </UnorderedListItem>
                            <UnorderedListItem>
                                <Strong>Field 3:</Strong> @(_testField3 ?? "(not set)")
                            </UnorderedListItem>
                        </UnorderedList>
                    </Div>
                </Div>

                <Hr/>

                <H2>Basic TextEdit</H2>
                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="basicInput" Class="form-label">Basic Input (Standard binding)</Label>
                    <TextEdit Id="basicInput"
                              Placeholder="Enter some text..."
                              @bind-Text="_basicValue"/>
                    <Small Class="form-text" TextColor="TextColor.Muted">Current value: @_basicValue</Small>
                </Div>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="expressionInput" Class="form-label">Expression Tree Binding</Label>
                    <TextEdit Id="expressionInput"
                              Placeholder="Uses expression tree..."
                              @bind-Text="_expressionValue"/>
                    <Small Class="form-text" TextColor="TextColor.Muted">Current value: @_expressionValue</Small>
                </Div>

                <Hr/>

                <H2>TextEdit with Validation</H2>
                <Validations Model="_validationModel">
                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="validatedInput" Class="form-label">Required Field</Label>
                        <Validation Action="@ValidateRequired">
                            <TextEdit Id="validatedInput"
                                      Placeholder="This field is required..."
                                      @bind-Text="_validationModel.RequiredField"/>
                            <ValidationError/>
                        </Validation>
                    </Div>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="emailInput" Class="form-label">Email Field</Label>
                        <Validation Action="@ValidateEmail">
                            <TextEdit Id="emailInput"
                                      Placeholder="Enter a valid email..."
                                      @bind-Text="_validationModel.EmailField"/>
                            <ValidationError/>
                        </Validation>
                    </Div>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="patternInput" Class="form-label">Phone Number (Pattern Validation)</Label>
                        <Validation UsePattern="true" PatternString="^[\d\s\-\(\)\+]+$">
                            <TextEdit Id="patternInput"
                                      Placeholder="Enter phone number..."
                                      @bind-Text="_validationModel.PhoneField"/>
                            <ValidationError/>
                        </Validation>
                    </Div>
                </Validations>

                <Hr/>

                <H2>Form with Multiple Validations</H2>
                <Validations @ref="_validationsRef" Model="_formModel">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <Div Margin="Margin.Is3.FromBottom">
                                <Label For="firstName" Class="form-label">First Name</Label>
                                <Validation Action="@ValidateRequired">
                                    <TextEdit Id="firstName"
                                              Placeholder="First name..."
                                              @bind-Text="_formModel.FirstName"/>
                                    <ValidationError/>
                                </Validation>
                            </Div>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <Div Margin="Margin.Is3.FromBottom">
                                <Label For="lastName" Class="form-label">Last Name</Label>
                                <Validation Action="@ValidateRequired">
                                    <TextEdit Id="lastName"
                                              Placeholder="Last name..."
                                              @bind-Text="_formModel.LastName"/>
                                    <ValidationError/>
                                </Validation>
                            </Div>
                        </Column>
                    </Row>

                    <Div Margin="Margin.Is3.FromBottom">
                        <Label For="company" Class="form-label">Company</Label>
                        <Validation Action="@ValidateCompany">
                            <TextEdit Id="company"
                                      Placeholder="Company name..."
                                      @bind-Text="_formModel.Company"/>
                            <ValidationError/>
                        </Validation>
                    </Div>

                    <Button BackgroundColor="BackgroundColor.Primary" OnClick="ValidateAll">Validate All Fields</Button>
                    <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearAll" Margin="Margin.Is2.FromStart">Clear All</Button>
                </Validations>
            </Div>
        </Column>
    </Row>
</Container>

@code{

    // Binding Test Fields
    private string? _testField1;
    private string? _testField2;
    private string? _testField3 = "Initial Value for Field 3";

    private string _basicValue = string.Empty;
    private string _expressionValue = string.Empty;

    private ValidationModel _validationModel = new();
    private FormModel _formModel = new();

    private Validations? _validationsRef;

    protected override void OnInitialized()
    {
    }

    private void LoadTestData()
    {
        _testField1 = "Test Data 1 - Loaded";
        _testField2 = "Test Data 2 - Loaded";
        _testField3 = "Test Data 3 - Loaded";
        Logger.LogInformation("Test data loaded: Field1={Field1}, Field2={Field2}, Field3={Field3}", _testField1, _testField2, _testField3);
    }

    private void ClearTestData()
    {
        _testField1 = null;
        _testField2 = null;
        _testField3 = null;
        Logger.LogInformation("Test data cleared");
    }

    private void UpdateTestData()
    {
        _testField1 = $"Random-{Guid.NewGuid().ToString()[..8]}";
        _testField2 = $"Random-{Guid.NewGuid().ToString()[..8]}";
        _testField3 = $"Random-{Guid.NewGuid().ToString()[..8]}";
        Logger.LogInformation("Test data updated with random values");
    }

    private void ValidateRequired(ValidatorEventArgs e)
    {
        if (e.Value.ToString().IsNullOrWhiteSpace() == true)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "This field is required.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private void ValidateEmail(ValidatorEventArgs e)
    {
        var email = e.Value.ToString();

        if (email.IsNullOrWhiteSpace())
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Email is required.";
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please enter a valid email address.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private void ValidateCompany(ValidatorEventArgs e)
    {
        var company = e.Value?.ToString();
        if (company.IsNullOrWhiteSpace())
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Company name is required.";
        }
        else if (company.Length < 2)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Company name must be at least 2 characters.";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private async Task ValidateAll()
    {
        if (_validationsRef is not null)
        {
            await _validationsRef.Validate();
        }
    }

    private async Task ClearAll()
    {
        if (_validationsRef is not null)
        {
            await _validationsRef.ClearAll();
        }

        _formModel = new FormModel();
        await InvokeAsync(StateHasChanged);
    }

    public class ValidationModel
    {
        public string RequiredField { get; set; } = string.Empty;
        public string EmailField { get; set; } = string.Empty;
        public string PhoneField { get; set; } = string.Empty;
    }

    public class FormModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Company { get; set; } = string.Empty;
    }

}