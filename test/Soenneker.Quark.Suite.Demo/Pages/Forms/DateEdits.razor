@page "/forms/dateedits"
@using Microsoft.Extensions.Logging

@inject ILogger<Index> Logger

<Container Padding="Padding.Is4.OnY">
    <Row>
        <Column>
            <Div TextAlignment="TextAlignment.Center" Margin="Margin.Is5.FromEnd">
                <H1 DisplaySize="DisplaySize.Is4" FontWeight="FontWeight.Bold" TextColor="TextColor.Primary">DateEdits</H1>
                <Paragraph Class="lead" TextColor="TextColor.Muted">This page demonstrates the DateEdit component functionality.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <H2>ðŸ§ª BINDING TEST SECTION</H2>
            <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromEnd">
                <Strong>Test Instructions:</Strong> Select dates below or click "Load Test Data" to verify binding works.
            </Alert>

            <Div Margin="Margin.Is4.FromBottom" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Light" BorderRadius="BorderRadius.Default">
                <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testDate1" Form="true" FontWeight="FontWeight.Bold">Test Date 1:</Label>
                    <DateEdit Id="testDate1"
                              Placeholder="Select a date..."
                              @bind-Date="_testDate1"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" BorderRadius="BorderRadius.Default">
                        <Strong>Bound Value:</Strong> <Code>@(_testDate1?.ToString("yyyy-MM-dd") ?? "(empty)")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testDate2" Form="true" FontWeight="FontWeight.Bold">Test Date 2 (Pre-populated with today):</Label>
                    <DateEdit Id="testDate2"
                              Placeholder="Select a date..."
                              @bind-Date="_testDate2"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" BorderRadius="BorderRadius.Default">
                        <Strong>Bound Value:</Strong> <Code>@(_testDate2?.ToString("yyyy-MM-dd") ?? "(empty)")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromTop">
                    <Button BackgroundColor="BackgroundColor.Primary" OnClick="LoadDateTestData" Margin="Margin.Is2.FromEnd">Load Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearDateTestData" Margin="Margin.Is2.FromEnd">Clear Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Warning" OnClick="UpdateDateTestData">Update to Random Dates</Button>
                </Div>

                <Div Margin="Margin.Is3.FromTop" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Success" Class="bg-opacity-10 rounded">
                    <H4>Test Results:</H4>
                    <UnorderedList Margin="Margin.Is0.FromBottom">
                        <UnorderedListItem>
                            <Strong>Date 1:</Strong> @(_testDate1?.ToString("yyyy-MM-dd") ?? "(not set)")
                        </UnorderedListItem>
                        <UnorderedListItem>
                            <Strong>Date 2:</Strong> @(_testDate2?.ToString("yyyy-MM-dd") ?? "(not set)")
                        </UnorderedListItem>
                    </UnorderedList>
                </Div>
            </Div>

            <Hr/>

            <Row Margin="Margin.Is4.FromTop">
                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Basic Date Input</H3>
                    <DateEdit Date="@basicDate" DateChanged="@((DateTime? value) => basicDate = value)" Placeholder="Select a date"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date: @basicDate?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>

                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Date and Time Input</H3>
                    <DateEdit Date="@dateTimeValue" DateChanged="@((DateTime? value) => dateTimeValue = value)" InputMode="DateInputMode.DateTime" Placeholder="Select date and time"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date/time: @dateTimeValue?.ToString("yyyy-MM-dd HH:mm")</Paragraph>
                </Column>
            </Row>

            <Row Margin="Margin.Is4.FromTop">
                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Month Input</H3>
                    <DateEdit Date="@monthValue" DateChanged="@((DateTime? value) => monthValue = value)" InputMode="DateInputMode.Month" Placeholder="Select month"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected month: @monthValue?.ToString("yyyy-MM")</Paragraph>
                </Column>

                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Date with Min/Max</H3>
                    <DateEdit Date="@restrictedDate" DateChanged="@((DateTime? value) => restrictedDate = value)" Min="@(DateTime.Today)" Max="@(DateTime.Today.AddDays(30))" Placeholder="Select date (next 30 days)"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date: @restrictedDate?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>
            </Row>

            <Row Margin="Margin.Is4.FromTop">
                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Disabled Date Input</H3>
                    <DateEdit Date="@(DateTime.Today)" Disabled="true"/>
                    <Paragraph Margin="Margin.Is2.FromTop">This input is disabled</Paragraph>
                </Column>

                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>ReadOnly Date Input</H3>
                    <DateEdit Date="@(DateTime.Today)" ReadOnly="true"/>
                    <Paragraph Margin="Margin.Is2.FromTop">This input is read-only</Paragraph>
                </Column>
            </Row>

            <Row Margin="Margin.Is4.FromTop">
                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Required Date Input</H3>
                    <DateEdit Date="@requiredDate" DateChanged="@((DateTime? value) => requiredDate = value)" Required="true" Placeholder="Required field"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date: @requiredDate?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>

                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>Date with Step</H3>
                    <DateEdit Date="@stepDate" DateChanged="@((DateTime? value) => stepDate = value)" Step="7" Placeholder="Weekly intervals"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date: @stepDate?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>
            </Row>

            <Row Margin="Margin.Is4.FromTop">
                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>DateOnly Input</H3>
                    <DateEdit DateOnly="@dateOnlyValue" DateOnlyChanged="@((DateOnly? value) => dateOnlyValue = value)" Placeholder="Select a date (DateOnly)"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected DateOnly: @dateOnlyValue?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>

                <Column ColumnSize="@ColumnSize.Is6.OnTablet">
                    <H3>DateOnly with Min/Max</H3>
                    <DateEdit DateOnly="@restrictedDateOnly"
                              DateOnlyChanged="@((DateOnly? value) => restrictedDateOnly = value)"
                              MinDateOnly="@(DateOnly.FromDateTime(DateTime.Today))"
                              MaxDateOnly="@(DateOnly.FromDateTime(DateTime.Today.AddDays(30)))"
                              Placeholder="Select date (next 30 days)"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected DateOnly: @restrictedDateOnly?.ToString("yyyy-MM-dd")</Paragraph>
                </Column>
            </Row>

            <Row Margin="Margin.Is4.FromTop">
                <Column>
                    <H3>Event Handling</H3>
                    <DateEdit Date="@eventDate"
                              DateChanged="@((DateTime? value) => eventDate = value)"
                              OnChange="OnDateChange"
                              OnInput="OnDateInput"
                              Placeholder="Watch events in console"/>
                    <Paragraph Margin="Margin.Is2.FromTop">Selected date: @eventDate?.ToString("yyyy-MM-dd")</Paragraph>
                    <Paragraph>Last change event: @lastChangeEvent</Paragraph>
                    <Paragraph>Last input event: @lastInputEvent</Paragraph>
                </Column>
            </Row>
        </Column>
    </Row>
</Container>

@code {

    // Binding Test Fields
    private DateTime? _testDate1;
    private DateTime? _testDate2 = DateTime.Today;

    private DateTime? basicDate;
    private DateTime? dateTimeValue;
    private DateTime? monthValue;
    private DateTime? restrictedDate;
    private DateTime? requiredDate;
    private DateTime? stepDate;
    private DateTime? eventDate;
    private DateOnly? dateOnlyValue;
    private DateOnly? restrictedDateOnly;
    private string lastChangeEvent = "None";
    private string lastInputEvent = "None";

    protected override void OnInitialized()
    {
        Logger.LogInformation("DateEdit demo page initialized");
    }

    private void LoadDateTestData()
    {
        _testDate1 = new DateTime(2025, 12, 25);
        _testDate2 = new DateTime(2026, 1, 1);
        Logger.LogInformation("Date test data loaded");
    }

    private void ClearDateTestData()
    {
        _testDate1 = null;
        _testDate2 = null;
        Logger.LogInformation("Date test data cleared");
    }

    private void UpdateDateTestData()
    {
        var random = new Random();
        _testDate1 = DateTime.Today.AddDays(random.Next(-365, 365));
        _testDate2 = DateTime.Today.AddDays(random.Next(-365, 365));
        Logger.LogInformation("Date test data updated with random dates");
    }

    private void OnDateChange(ChangeEventArgs e)
    {
        lastChangeEvent = $"Change: {e?.Value} at {DateTime.Now:HH:mm:ss}";
        Logger.LogInformation("Date change event: {Value}", e?.Value);
    }

    private void OnDateInput(ChangeEventArgs e)
    {
        lastInputEvent = $"Input: {e?.Value} at {DateTime.Now:HH:mm:ss}";
        Logger.LogInformation("Date input event: {Value}", e?.Value);
    }

}
