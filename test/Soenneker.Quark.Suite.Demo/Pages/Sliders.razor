@page "/sliders"

<Container Padding="Padding.Is4.OnY">
<Row>
    <Column ColumnSize="@ColumnSize.Is12">
        <Div Class="text-center" Margin="Margin.Is5.FromBottom">
            <H1 Class="display-4 fw-bold text-primary">Sliders</H1>
            <Paragraph Class="lead text-muted">This page demonstrates the Quark.Slider component with various configurations and use cases.</Paragraph>
        </Div>
    </Column>
</Row>

<Row Class="g-4">
    <Column ColumnSize="@ColumnSize.Is12">
        <Div>
            <H2>ðŸ§ª BINDING TEST SECTION</H2>
            <Alert BackgroundColor="BackgroundColor.Info" Margin="Margin.Is3.FromEnd">
                <Strong>Test Instructions:</Strong> Move sliders below or click "Load Test Data" to verify binding works.
            </Alert>

            <Div Margin="Margin.Is4.FromBottom" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Light" Class="rounded">
                <H3 Margin="Margin.Is3.FromBottom">Two-Way Binding Test</H3>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testSlider1" Class="form-label fw-bold">Test Slider 1 (0-100):</Label>
                    <Slider @bind-Value="_testSlider1" Min="0" Max="100"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" Class="rounded">
                        <Strong>Bound Value:</Strong> <Code>@_testSlider1.ToString("F1")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromBottom">
                    <Label For="testSlider2" Class="form-label fw-bold">Test Slider 2 (Pre-set to 75):</Label>
                    <Slider @bind-Value="_testSlider2" Min="0" Max="100"/>
                    <Div Margin="Margin.Is2.FromTop" Padding="Padding.Is2" BackgroundColor="BackgroundColor.White" Class="rounded">
                        <Strong>Bound Value:</Strong> <Code>@_testSlider2.ToString("F1")</Code>
                    </Div>
                </Div>

                <Div Margin="Margin.Is3.FromTop">
                    <Button BackgroundColor="BackgroundColor.Primary" OnClick="LoadSliderTestData" Margin="Margin.Is2.FromEnd">Load Test Data</Button>
                    <Button BackgroundColor="BackgroundColor.Secondary" OnClick="ClearSliderTestData" Margin="Margin.Is2.FromEnd">Clear Test Data (Set to 0)</Button>
                    <Button BackgroundColor="BackgroundColor.Warning" OnClick="UpdateSliderTestData">Update to Random Values</Button>
                </Div>

                <Div Margin="Margin.Is3.FromTop" Padding="Padding.Is3" BackgroundColor="BackgroundColor.Success" Class="bg-opacity-10 rounded">
                    <H4>Test Results:</H4>
                    <UnorderedList Margin="Margin.Is0.FromBottom">
                        <UnorderedListItem>
                            <Strong>Slider 1:</Strong> @_testSlider1.ToString("F1")
                        </UnorderedListItem>
                        <UnorderedListItem>
                            <Strong>Slider 2:</Strong> @_testSlider2.ToString("F1")
                        </UnorderedListItem>
                    </UnorderedList>
                </Div>
            </Div>

            <Hr/>

            <H2>Basic Slider</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Value="@basicValue" OnValueChanged="HandleBasicValueChanged"/>
            </Div>
            <Paragraph Class="text-muted">Current value: <Strong>@basicValue</Strong></Paragraph>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider with Min and Max</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="@minMaxValue" OnValueChanged="HandleMinMaxValueChanged"/>
            </Div>
            <Paragraph Class="text-muted">Current value: <Strong>@minMaxValue</Strong> (Range: 0-100)</Paragraph>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider with Step</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Step="5" Value="@stepValue" OnValueChanged="HandleStepValueChanged"/>
            </Div>
            <Paragraph Class="text-muted">Current value: <Strong>@stepValue</Strong> (Step: 5)</Paragraph>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider Sizes</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Small Size</H5>
                <Slider Min="0" Max="100" Value="@smallValue" Size="Size.Small" OnValueChanged="HandleSmallValueChanged"/>
                <Paragraph Class="text-muted">Small slider value: <Strong>@smallValue</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Default Size</H5>
                <Slider Min="0" Max="100" Value="@defaultValue" Size="Size.Default" OnValueChanged="HandleDefaultValueChanged"/>
                <Paragraph Class="text-muted">Default slider value: <Strong>@defaultValue</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Large Size</H5>
                <Slider Min="0" Max="100" Value="@largeValue" Size="Size.Large" OnValueChanged="HandleLargeValueChanged"/>
                <Paragraph Class="text-muted">Large slider value: <Strong>@largeValue</Strong></Paragraph>
            </Div>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider Colors</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Primary Color</H5>
                <Slider Min="0" Max="100" Value="@primaryValue" Color="Color.Primary" OnValueChanged="HandlePrimaryValueChanged"/>
                <Paragraph Class="text-muted">Primary slider value: <Strong>@primaryValue</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Success Color</H5>
                <Slider Min="0" Max="100" Value="@successValue" Color="Color.Success" OnValueChanged="HandleSuccessValueChanged"/>
                <Paragraph Class="text-muted">Success slider value: <Strong>@successValue</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Warning Color</H5>
                <Slider Min="0" Max="100" Value="@warningValue" Color="Color.Warning" OnValueChanged="HandleWarningValueChanged"/>
                <Paragraph Class="text-muted">Warning slider value: <Strong>@warningValue</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <H5>Danger Color</H5>
                <Slider Min="0" Max="100" Value="@dangerValue" Color="Color.Danger" OnValueChanged="HandleDangerValueChanged"/>
                <Paragraph Class="text-muted">Danger slider value: <Strong>@dangerValue</Strong></Paragraph>
            </Div>
        </Div>

        <Hr/>

        <Div>
            <H2>Disabled Slider</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="50" Disabled="true"/>
            </Div>
            <Paragraph Class="text-muted">This slider is disabled and cannot be interacted with.</Paragraph>
        </Div>

        <Hr/>

        <Div>
            <H2>Range Slider (Min/Max Values)</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="@rangeMin" OnValueChanged="HandleRangeMinChanged"/>
                <Paragraph Class="text-muted">Min value: <Strong>@rangeMin</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="@rangeMax" OnValueChanged="HandleRangeMaxChanged"/>
                <Paragraph Class="text-muted">Max value: <Strong>@rangeMax</Strong></Paragraph>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <Paragraph Class="text-muted">Range: <Strong>@rangeMin</Strong> - <Strong>@rangeMax</Strong></Paragraph>
            </Div>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider with Labels</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Div Class="d-flex justify-content-between" Margin="Margin.Is2.FromBottom">
                    <Span>0</Span>
                    <Span>25</Span>
                    <Span>50</Span>
                    <Span>75</Span>
                    <Span>100</Span>
                </Div>
                <Slider Min="0" Max="100" Value="@labeledValue" OnValueChanged="HandleLabeledValueChanged"/>
                <Paragraph Class="text-muted">Current value: <Strong>@labeledValue</Strong></Paragraph>
            </Div>
        </Div>

        <Hr/>

        <Div>
            <H2>Interactive Slider Controls</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="@interactiveValue" OnValueChanged="HandleInteractiveValueChanged"/>
            </Div>
            <Div Margin="Margin.Is3.FromBottom">
                <Paragraph Class="text-muted">Current value: <Strong>@interactiveValue</Strong></Paragraph>
                <Button BackgroundColor="BackgroundColor.Primary" Size="Size.Small" OnClick="SetToZero">Set to 0</Button>
                <Button BackgroundColor="BackgroundColor.Secondary" Size="Size.Small" OnClick="SetToFifty">Set to 50</Button>
                <Button BackgroundColor="BackgroundColor.Success" Size="Size.Small" OnClick="SetToHundred">Set to 100</Button>
                <Button BackgroundColor="BackgroundColor.Info" Size="Size.Small" OnClick="SetRandom">Random Value</Button>
            </Div>
        </Div>

        <Hr/>

        <Div>
            <H2>Slider with Custom Attributes</H2>
            <Div Margin="Margin.Is3.FromBottom">
                <Slider Min="0" Max="100" Value="@customValue"
                        OnValueChanged="HandleCustomValueChanged"
                        Name="customSlider"
                        Id="customSlider"
                        Class="custom-slider"/>
            </Div>
            <Paragraph Class="text-muted">Custom slider value: <Strong>@customValue</Strong></Paragraph>
        </Div>
    </Column>
</Row>
</Container>

@code {

    // Binding Test Fields
    private double _testSlider1 = 0;
    private double _testSlider2 = 75;

    private double basicValue = 50;
    private double minMaxValue = 25;
    private double stepValue = 30;
    private double smallValue = 40;
    private double defaultValue = 60;
    private double largeValue = 80;
    private double primaryValue = 35;
    private double successValue = 65;
    private double warningValue = 45;
    private double dangerValue = 75;
    private double rangeMin = 20;
    private double rangeMax = 80;
    private double labeledValue = 50;
    private double interactiveValue = 25;
    private double customValue = 55;

    private void LoadSliderTestData()
    {
        _testSlider1 = 50;
        _testSlider2 = 90;
    }

    private void ClearSliderTestData()
    {
        _testSlider1 = 0;
        _testSlider2 = 0;
    }

    private void UpdateSliderTestData()
    {
        var random = new Random();
        _testSlider1 = random.NextDouble() * 100;
        _testSlider2 = random.NextDouble() * 100;
    }

    private async Task HandleBasicValueChanged(double value)
    {
        basicValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleMinMaxValueChanged(double value)
    {
        minMaxValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleStepValueChanged(double value)
    {
        stepValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleSmallValueChanged(double value)
    {
        smallValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleDefaultValueChanged(double value)
    {
        defaultValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleLargeValueChanged(double value)
    {
        largeValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandlePrimaryValueChanged(double value)
    {
        primaryValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleSuccessValueChanged(double value)
    {
        successValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleWarningValueChanged(double value)
    {
        warningValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleDangerValueChanged(double value)
    {
        dangerValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleRangeMinChanged(double value)
    {
        rangeMin = value;
        if (rangeMin > rangeMax)
        {
            rangeMax = rangeMin;
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleRangeMaxChanged(double value)
    {
        rangeMax = value;
        if (rangeMax < rangeMin)
        {
            rangeMin = rangeMax;
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleLabeledValueChanged(double value)
    {
        labeledValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleInteractiveValueChanged(double value)
    {
        interactiveValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleCustomValueChanged(double value)
    {
        customValue = value;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SetToZero()
    {
        interactiveValue = 0;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SetToFifty()
    {
        interactiveValue = 50;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SetToHundred()
    {
        interactiveValue = 100;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SetRandom()
    {
        var random = new Random();
        interactiveValue = random.Next(0, 101);
        StateHasChanged();
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
    }

}