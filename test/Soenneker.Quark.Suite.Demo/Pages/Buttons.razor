@page "/buttons"

<Container Class="py-4">
    <Row>
        <Column>
            <Div Class="text-center" Margin="Margin.Is5.FromEnd">
                <H1 Class="display-4 fw-bold text-primary">Buttons</H1>
                <Paragraph Class="lead text-muted">This page demonstrates the Quark.Buttons component with various configurations and use cases.</Paragraph>
            </Div>
        </Column>
    </Row>

    <Row Gap="Gap.Is4">
        <Column>
            <Div>
                <H2>Basic Buttons</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@Color.Primary" OnClick="HandleBasicClick">Primary Button</Button>
                    <Button BackgroundColor="@Color.Secondary" OnClick="HandleBasicClick">Secondary Button</Button>
                    <Button BackgroundColor="@Color.Success" OnClick="HandleBasicClick">Success Button</Button>
                    <Button BackgroundColor="@Color.Danger" OnClick="HandleBasicClick">Danger Button</Button>
                </Div>
                <Paragraph Class="text-muted">These buttons use the BackgroundColor parameter instead of hardcoded CSS classes.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Button Colors</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" OnClick="HandleBasicClick">Primary</Button>
                    <Button BackgroundColor="@(Color.Secondary)" OnClick="HandleBasicClick">Secondary</Button>
                    <Button BackgroundColor="@(Color.Success)" OnClick="HandleBasicClick">Success</Button>
                    <Button BackgroundColor="@(Color.Danger)" OnClick="HandleBasicClick">Danger</Button>
                    <Button BackgroundColor="@(Color.Warning)" OnClick="HandleBasicClick">Warning</Button>
                    <Button BackgroundColor="@(Color.Info)" OnClick="HandleBasicClick">Info</Button>
                    <Button BackgroundColor="@(Color.Light)" OnClick="HandleBasicClick">Light</Button>
                    <Button BackgroundColor="@(Color.Dark)" OnClick="HandleBasicClick">Dark</Button>
                </Div>
                <Div Margin="Margin.Is3.FromEnd">
                    <H4>Colors with Different Sizes</H4>
                    <Button BackgroundColor="@(Color.Success)" Size="@Size.Small" OnClick="HandleBasicClick">Small Success</Button>
                    <Button BackgroundColor="@(Color.Danger)" Size="@Size.Large" OnClick="HandleBasicClick">Large Danger</Button>
                    <Button BackgroundColor="@(Color.Warning)" Size="@Size.ExtraLarge" OnClick="HandleBasicClick">Extra Large Warning</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Button Sizes</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.ExtraSmall" OnClick="HandleBasicClick">Extra Small</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.Small" OnClick="HandleBasicClick">Small</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.Default" OnClick="HandleBasicClick">Default</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.Medium" OnClick="HandleBasicClick">Medium</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.Large" OnClick="HandleBasicClick">Large</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.ExtraLarge" OnClick="HandleBasicClick">Extra Large</Button>
                    <Button BackgroundColor="@(Color.Primary)" Size="@Size.ExtraExtraLarge" OnClick="HandleBasicClick">Extra Extra Large</Button>
                </Div>
                <Div Margin="Margin.Is3.FromEnd">
                    <H4>Different Styles with Small Size</H4>
                    <Button BackgroundColor="@(Color.Secondary)" Size="@Size.Small" OnClick="HandleBasicClick">Secondary Small</Button>
                    <Button BackgroundColor="@(Color.Success)" Size="@Size.Small" OnClick="HandleBasicClick">Success Small</Button>
                    <Button BackgroundColor="@(Color.Danger)" Size="@Size.Small" OnClick="HandleBasicClick">Danger Small</Button>
                    <Button BackgroundColor="@(Color.Warning)" Size="@Size.Small" OnClick="HandleBasicClick">Warning Small</Button>
                </Div>
                <Div Margin="Margin.Is3.FromEnd">
                    <H4>Different Styles with Large Size</H4>
                    <Button BackgroundColor="@(Color.Secondary)" Size="@Size.Large" OnClick="HandleBasicClick">Secondary Large</Button>
                    <Button BackgroundColor="@(Color.Success)" Size="@Size.Large" OnClick="HandleBasicClick">Success Large</Button>
                    <Button BackgroundColor="@(Color.Danger)" Size="@Size.Large" OnClick="HandleBasicClick">Danger Large</Button>
                    <Button BackgroundColor="@(Color.Warning)" Size="@Size.Large" OnClick="HandleBasicClick">Warning Large</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Button Types</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" Type="@ButtonType.Link" OnClick="HandleBasicClick">Link Type</Button>
                    <Button BackgroundColor="@(Color.Secondary)" Type="@ButtonType.Submit" OnClick="HandleBasicClick">Submit Type</Button>
                    <Button BackgroundColor="@(Color.Warning)" Type="@ButtonType.Reset" OnClick="HandleBasicClick">Reset Type</Button>
                    <Button BackgroundColor="@(Color.Info)" Type="@ButtonType.Button" OnClick="HandleBasicClick">Button Type</Button>
                </Div>
                <Paragraph Class="text-muted">All button types now use the Type parameter with ButtonType enum values.</Paragraph>
            </Div>

            <Hr/>

            <Div>
                <H2>Disabled Buttons</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" Disabled>Disabled Primary (HTML-style)</Button>
                    <Button BackgroundColor="@(Color.Secondary)" Disabled="@true">Disabled Secondary (explicit true)</Button>
                    <Button BackgroundColor="@(Color.Success)" Disabled="@false">Enabled Success (explicit false)</Button>
                    <Button BackgroundColor="@(Color.Info)">Enabled Info (no disabled attribute)</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Loading Buttons</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" Loading="isLoading" OnClick="HandleLoadingClick">
                        Click to Load
                    </Button>
                    <Button BackgroundColor="@(Color.Success)" Loading="isLoading2" OnClick="HandleLoadingClick2">
                        Process Data
                    </Button>
                    <Button BackgroundColor="@(Color.Info)" Loading="isLoading3" OnClick="HandleLoadingClick3">
                        Custom Loading
                    </Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Button with Custom Loading Template</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Warning)" Loading="isLoading4" OnClick="HandleLoadingClick4" LoadingTemplate="@CustomLoadingTemplate">
                        Custom Template
                    </Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Button Attributes</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Dark)" Name="testButton" Value="testValue" OnClick="HandleBasicClick">Named Button</Button>
                    <Button BackgroundColor="@(Color.Light)" AutoFocus="true" OnClick="HandleBasicClick">Auto Focus</Button>
                </Div>
            </Div>

            <Hr/>

            <Div>
                <H2>Click Events</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@(Color.Primary)" OnClick="HandleClickWithData">Click Counter: @clickCount</Button>
                    <p class="text-muted">Last clicked at: @lastClickTime</p>
                </Div>
            </Div>

            <Div>
                <H2>Custom CSS Colors</H2>
                <Div Margin="Margin.Is3.FromEnd">
                    <Button BackgroundColor="@Color.FromCss("#ff6b6b")" OnClick="HandleBasicClick">Custom Red</Button>
                    <Button BackgroundColor="@Color.FromCss("#4ecdc4")" OnClick="HandleBasicClick">Custom Teal</Button>
                    <Button BackgroundColor="@Color.FromCss("#45b7d1")" OnClick="HandleBasicClick">Custom Blue</Button>
                </Div>
                <Paragraph Class="text-muted">These buttons use custom hex colors that will be applied as CSS styles.</Paragraph>
            </Div>
        </Column>
    </Row>
</Container>

@code {
    private bool isLoading;
    private bool isLoading2;
    private bool isLoading3;
    private bool isLoading4;
    private int clickCount;
    private string lastClickTime = "";

    private RenderFragment CustomLoadingTemplate => @<div>
                                                        <span class="spinner-grow spinner-grow-sm me-2" role="status" aria-hidden="true"></span>
                                                        <span class="text-warning">Custom Loading...</span>
                                                    </div>;

    private async Task HandleBasicClick(MouseEventArgs args)
    {
        await Task.CompletedTask;
    }

    private async Task HandleLoadingClick(MouseEventArgs args)
    {
        isLoading = true;
        StateHasChanged();

        // Simulate async operation
        await Task.Delay(3000);

        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleLoadingClick2(MouseEventArgs args)
    {
        isLoading2 = true;
        StateHasChanged();

        // Simulate async operation
        await Task.Delay(2000);

        isLoading2 = false;
        StateHasChanged();
    }

    private async Task HandleLoadingClick3(MouseEventArgs args)
    {
        isLoading3 = true;
        StateHasChanged();

        // Simulate async operation
        await Task.Delay(2500);

        isLoading3 = false;
        StateHasChanged();
    }

    private async Task HandleLoadingClick4(MouseEventArgs args)
    {
        isLoading4 = true;
        StateHasChanged();

        // Simulate async operation
        await Task.Delay(4000);

        isLoading4 = false;
        StateHasChanged();
    }

    private async Task HandleClickWithData(MouseEventArgs args)
    {
        clickCount++;
        lastClickTime = DateTime.Now.ToString("HH:mm:ss");
        await Task.CompletedTask; // Ensure async method completes properly
    }

    protected override void OnInitialized()
    {
    }

}